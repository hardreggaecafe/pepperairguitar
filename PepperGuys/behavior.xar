<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="50">
                        <Box name="Say" id="1" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="208" y="25">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " さあてミュージックハッカソンもたけなわ。1曲いかがですか？ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[さあてミュージックハッカソンもたけなわ。1曲いかがですか？]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Speech Reco." id="2" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="337" y="27">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="はい;いいえ" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Switch Case" id="4" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="473" y="25">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("いいえ")):
			self.output_1(p)
		elif(p == self.typeConversion("頼むよ")):
			self.output_2(p)
		elif(p == self.typeConversion("そうだね")):
			self.output_3(p)
		elif(p == self.typeConversion("ありがとう")):
			self.output_4(p)
		elif(p == self.typeConversion("はい")):
			self.output_5(p)
		elif(p == self.typeConversion("やめとく")):
			self.output_6(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;いいえ&quot;</keyword>
                                    <keyword>&quot;頼むよ&quot;</keyword>
                                    <keyword>&quot;そうだね&quot;</keyword>
                                    <keyword>&quot;ありがとう&quot;</keyword>
                                    <keyword>&quot;はい&quot;</keyword>
                                    <keyword>&quot;やめとく&quot;</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="7" />
                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="8" />
                            <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="9" />
                        </Box>
                        <Box name="Say (2)" id="5" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="864" y="42">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " 音楽再生はやめときますね！ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[音楽再生はやめときますね！]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Switch Case (1)" id="7" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="272" y="565">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("neutral")):
			self.output_1(p)
		elif(p == self.typeConversion("happy")):
			self.output_2(p)
		elif(p == self.typeConversion("surprised")):
			self.output_3(p)
		elif(p == self.typeConversion("angry")):
			self.output_4(p)
		elif(p == self.typeConversion("sad")):
			self.output_5(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;neutral&quot;</keyword>
                                    <keyword>&quot;happy&quot;</keyword>
                                    <keyword>&quot;surprised&quot;</keyword>
                                    <keyword>&quot;angry&quot;</keyword>
                                    <keyword>&quot;sad&quot;</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="7" />
                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="8" />
                        </Box>
                        <Box name="Say (3)" id="8" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="607" y="211">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " その顔は失恋しましたね。さっさと忘れて次に行きましょう。そんなあなたにこの曲を贈ります。 ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[その顔は失恋しましたね。さっさと忘れて次に行きましょう。そんなあなたにこの曲を贈ります。]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (4)" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="597" y="317">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " いえいえなにか良いことあったんですか？。お金でも拾いましたか？じゃあこの曲でパーッと行きましょう！ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[いえいえなにか良いことあったんですか？。お金でも拾いましたか？じゃあこの曲でパーッと行きましょう！]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Get Expression (Multi)" id="13" localization="8" tooltip="This box returns the detected facial expression of every person in front of the robot.&#x0A;The detection fails when there is no person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. &#x0A;Furthermore it is possible to select the required emotions:&#x0A;- neutral&#x0A;- happy&#x0A;- surprised&#x0A;- angry&#x0A;- sad" x="207" y="211">
                            <bitmap>media/images/box/interaction/emotion.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.threshNeutralEmotion = self.confidence + 0.15
        self.threshHappyEmotion = self.confidence
        self.threshSurprisedEmotion = self.confidence + 0.05
        self.threshAngryEmotion = self.confidence + 0.2
        self.threshSadEmotion = self.confidence + 0.15
        self.emotions = ["neutral", "happy", "surprised", "angry", "sad"]
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.bIsRunning = False
        self.emotionValues = []
        self.cancelDelays()

    def onInput_onStart(self):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)
            self.emotionValues = []
            self.bIsRunning = True
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        if len(ids) == 0:
                            self.errorMes = "No face detected"
                            self.onUnload()
                        else:
                            #analyze age properties
                            index = -1
                            for id in ids:
                                index += 1
                                self.faceC.analyzeFaceCharacteristics(id)
                                time.sleep(0.1)
                                value = ALMemory.getData("PeoplePerception/Person/"+str(id)+"/ExpressionProperties")
                                elem = [x for x in self.emotionValues if x[0] == id]
                                if elem !=[]:
                                    elemIndex = self.emotionValues.index(elem[0])
                                    self.emotionValues[elemIndex][1][0] += value[0]
                                    self.emotionValues[elemIndex][1][1] += value[1]
                                    self.emotionValues[elemIndex][1][2] += value[2]
                                    self.emotionValues[elemIndex][1][3] += value[3]
                                    self.emotionValues[elemIndex][1][4] += value[4]
                                    self.emotionValues[elemIndex][2] += 1
                                else:
                                    self.emotionValues.append([id, value, 1])
                                self.counter += 1
                    except Exception as e:
                        ids = []
                else:
                    #calculate mean value for neutral, happy, surprised, angry or sad
                    results = []
                    recognized = [0,0,0,0,0]
                    for res in self.emotionValues:
                        emotions = res[1]
                        emotions[0] /= res[2]
                        emotions[1] /= res[2]
                        emotions[2] /= res[2]
                        emotions[3] /= res[2]
                        emotions[4] /= res[2]
                        if self.getParameter("neutral") and emotions[0] > self.threshNeutralEmotion:
                            recognized[0] = emotions[0]
                        if self.getParameter("happy") and emotions[1] >self.threshHappyEmotion:
                            recognized[1] = emotions[1]
                        if self.getParameter("surprised") and emotions[2] > self.threshSurprisedEmotion:
                            recognized[2] = emotions[2]
                        if self.getParameter("angry") and emotions[3] > self.threshAngryEmotion:
                            recognized[3] = emotions[3]
                        if self.getParameter("sad") and emotions[4] > self.threshSadEmotion:
                            recognized[4] = emotions[4]

                        try:
                            if recognized != [0,0,0,0,0]:
                                emotion = self.emotions[recognized.index(max(recognized))]
                            else:
                                emotion = None
                        except:
                            emotion = None
                        if emotion != None:
                            results.append([res[0], emotion])
                    try:
                        ALMemory.removeData("PeoplePerception/Person/"+str(ids[0])+"/ExpressionProperties")
                    except:
                        pass
                    if results != []:
                        self.onStopped(results[0][1])
                        self.onUnload()
                        return
                    else:
                        self.counter = 0

            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip='Returns an array containing [userId, emotion] for every user. The userId is the ID of the person as defined by the ALPeoplePerception API and emotion can be: &#x0A;- &quot;neutral&quot;&#x0A;- &quot;happy&quot;&#x0A;- &quot;surprised&quot;&#x0A;- &quot;angry&quot;&#x0A;- &quot;sad&quot;&#x0A;' id="4" />
                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                            <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.364865" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="4" default_value="5" min="1" max="60" tooltip="" id="7" />
                            <Parameter name="neutral" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                            <Parameter name="happy" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="9" />
                            <Parameter name="surprised" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="10" />
                            <Parameter name="angry" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
                            <Parameter name="sad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
                        </Box>
                        <Box name="loadUrl" id="21" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="628" y="609">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.loadUrl(url)
                tabletService.showWebview()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="index_sd.html" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="loadUrl (1)" id="17" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="643" y="1228">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.loadUrl(url)
                tabletService.showWebview()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="index_n.html" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="Python Script (2)" id="14" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="808" y="239">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.audio = ALProxy("ALAudioPlayer")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        url = "http://p.scdn.co/mp3-preview/597eb5a457d63787a0acc781943b76842f0a16f4"
        self.audio.playWebStream(url, 1, 0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Python Script" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="809" y="347">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.audio = ALProxy("ALAudioPlayer")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        url = "http://p.scdn.co/mp3-preview/6f57aca6ee3a0b840c82f68276799bd7cfcd1772"
        self.audio.playWebStream(url, 1, 0)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Timeline" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="808" y="671">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="770">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="12.2" />
                                        <Key frame="8" value="-0.139541" />
                                        <Key frame="15" value="-18.9" />
                                        <Key frame="26" value="34.2" />
                                        <Key frame="32" value="11.1" />
                                        <Key frame="43" value="36.5" />
                                        <Key frame="49" value="-0.139541" />
                                        <Key frame="64" value="-24.9" />
                                        <Key frame="72" value="-18.9" />
                                        <Key frame="77" value="-34.4" />
                                        <Key frame="84" value="-0.139541" />
                                        <Key frame="95" value="35" />
                                        <Key frame="99" value="-18.9" />
                                        <Key frame="110" value="34.2" />
                                        <Key frame="117" value="11.1" />
                                        <Key frame="128" value="36.5" />
                                        <Key frame="134" value="-0.139541" />
                                        <Key frame="150" value="33" />
                                        <Key frame="157" value="-18.9" />
                                        <Key frame="162" value="-34.4" />
                                        <Key frame="172" value="-0.139541" />
                                        <Key frame="184" value="12.2" />
                                        <Key frame="191" value="27" />
                                        <Key frame="206" value="34.2" />
                                        <Key frame="212" value="11.1" />
                                        <Key frame="225" value="-0.139541" />
                                        <Key frame="229" value="-0.139541" />
                                        <Key frame="246" value="33" />
                                        <Key frame="255" value="36.5" />
                                        <Key frame="260" value="12.2" />
                                        <Key frame="267" value="35" />
                                        <Key frame="282" value="34.2" />
                                        <Key frame="288" value="11.1" />
                                        <Key frame="299" value="36.5" />
                                        <Key frame="305" value="-0.139541" />
                                        <Key frame="322" value="33" />
                                        <Key frame="328" value="-18.9" />
                                        <Key frame="333" value="-34.4" />
                                        <Key frame="345" value="35" />
                                        <Key frame="349" value="-18.9" />
                                        <Key frame="362" value="-24.6" />
                                        <Key frame="366" value="11.1" />
                                        <Key frame="377" value="36.5" />
                                        <Key frame="398" value="-24.9" />
                                        <Key frame="406" value="-18.9" />
                                        <Key frame="411" value="-34.4" />
                                        <Key frame="422" value="-0.139541" />
                                        <Key frame="437" value="-24.9" />
                                        <Key frame="445" value="-18.9" />
                                        <Key frame="450" value="-34.4" />
                                        <Key frame="459" value="-0.139541" />
                                        <Key frame="466" value="-18.9" />
                                        <Key frame="473" value="-0.139541" />
                                        <Key frame="492" value="-24.9" />
                                        <Key frame="500" value="-18.9" />
                                        <Key frame="510" value="12.2" />
                                        <Key frame="517" value="35" />
                                        <Key frame="525" value="36.5" />
                                        <Key frame="530" value="12.2" />
                                        <Key frame="537" value="35" />
                                        <Key frame="552" value="34.2" />
                                        <Key frame="558" value="11.1" />
                                        <Key frame="569" value="36.5" />
                                        <Key frame="575" value="-0.139541" />
                                        <Key frame="595" value="-18.9" />
                                        <Key frame="617" value="-18.9" />
                                        <Key frame="623" value="36.5" />
                                        <Key frame="645" value="36.5" />
                                        <Key frame="658" value="-0.139541" />
                                        <Key frame="671" value="-18.9" />
                                        <Key frame="674" value="36.5" />
                                        <Key frame="692" value="-18.9" />
                                        <Key frame="696" value="36.5" />
                                        <Key frame="719" value="12.2" />
                                        <Key frame="723" value="-0.139541" />
                                        <Key frame="751" value="-24.6" />
                                        <Key frame="761" value="11.1" />
                                        <Key frame="770" value="-21.416" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="0.56071" />
                                        <Key frame="8" value="0.56071" />
                                        <Key frame="15" value="0.56071" />
                                        <Key frame="26" value="0.56071" />
                                        <Key frame="32" value="0.56071" />
                                        <Key frame="43" value="0.56071" />
                                        <Key frame="49" value="-119.5" />
                                        <Key frame="64" value="0.56071" />
                                        <Key frame="72" value="0.56071" />
                                        <Key frame="77" value="0.56071" />
                                        <Key frame="84" value="0.56071" />
                                        <Key frame="95" value="0.56071" />
                                        <Key frame="99" value="0.56071" />
                                        <Key frame="110" value="0.56071" />
                                        <Key frame="117" value="0.56071" />
                                        <Key frame="128" value="0.56071" />
                                        <Key frame="134" value="-88.3" />
                                        <Key frame="150" value="0.56071" />
                                        <Key frame="157" value="0.56071" />
                                        <Key frame="162" value="0.56071" />
                                        <Key frame="172" value="0.56071" />
                                        <Key frame="184" value="0.56071" />
                                        <Key frame="191" value="0.56071" />
                                        <Key frame="206" value="0.56071" />
                                        <Key frame="212" value="0.56071" />
                                        <Key frame="225" value="88.3" />
                                        <Key frame="229" value="-86.6" />
                                        <Key frame="246" value="0.56071" />
                                        <Key frame="255" value="0.56071" />
                                        <Key frame="260" value="0.56071" />
                                        <Key frame="267" value="0.56071" />
                                        <Key frame="282" value="0.56071" />
                                        <Key frame="288" value="0.56071" />
                                        <Key frame="299" value="0.56071" />
                                        <Key frame="305" value="-119.5" />
                                        <Key frame="322" value="0.56071" />
                                        <Key frame="328" value="0.56071" />
                                        <Key frame="333" value="0.56071" />
                                        <Key frame="345" value="0.56071" />
                                        <Key frame="349" value="0.56071" />
                                        <Key frame="362" value="0.56071" />
                                        <Key frame="366" value="0.56071" />
                                        <Key frame="377" value="0.56071" />
                                        <Key frame="398" value="0.56071" />
                                        <Key frame="406" value="0.56071" />
                                        <Key frame="411" value="0.56071" />
                                        <Key frame="422" value="-119.5" />
                                        <Key frame="437" value="0.56071" />
                                        <Key frame="445" value="0.56071" />
                                        <Key frame="450" value="0.56071" />
                                        <Key frame="459" value="0.56071" />
                                        <Key frame="466" value="0.56071" />
                                        <Key frame="473" value="116" />
                                        <Key frame="492" value="0.56071" />
                                        <Key frame="500" value="0.56071" />
                                        <Key frame="510" value="0.56071" />
                                        <Key frame="517" value="0.56071" />
                                        <Key frame="525" value="0.56071" />
                                        <Key frame="530" value="0.56071" />
                                        <Key frame="537" value="0.56071" />
                                        <Key frame="552" value="0.56071" />
                                        <Key frame="558" value="0.56071" />
                                        <Key frame="569" value="0.56071" />
                                        <Key frame="575" value="-119.5" />
                                        <Key frame="595" value="0.56071" />
                                        <Key frame="617" value="0.56071" />
                                        <Key frame="623" value="0.56071" />
                                        <Key frame="645" value="0.56071" />
                                        <Key frame="658" value="116" />
                                        <Key frame="671" value="0.56071" />
                                        <Key frame="674" value="0.56071" />
                                        <Key frame="692" value="0.56071" />
                                        <Key frame="696" value="0.56071" />
                                        <Key frame="719" value="0.56071" />
                                        <Key frame="723" value="0.56071" />
                                        <Key frame="751" value="0.56071" />
                                        <Key frame="761" value="0.56071" />
                                        <Key frame="770" value="1.0126" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-0.419428" />
                                        <Key frame="8" value="-0.419428" />
                                        <Key frame="15" value="-0.419428" />
                                        <Key frame="26" value="-0.419428" />
                                        <Key frame="32" value="-0.419428" />
                                        <Key frame="43" value="-0.419428" />
                                        <Key frame="49" value="-0.419428" />
                                        <Key frame="64" value="-0.419428" />
                                        <Key frame="72" value="-0.419428" />
                                        <Key frame="77" value="-0.419428" />
                                        <Key frame="84" value="-0.419428" />
                                        <Key frame="95" value="-0.419428" />
                                        <Key frame="99" value="-0.419428" />
                                        <Key frame="110" value="-0.419428" />
                                        <Key frame="117" value="-0.419428" />
                                        <Key frame="128" value="-0.419428" />
                                        <Key frame="134" value="-0.419428" />
                                        <Key frame="150" value="-0.419428" />
                                        <Key frame="157" value="-0.419428" />
                                        <Key frame="162" value="-0.419428" />
                                        <Key frame="172" value="-0.419428" />
                                        <Key frame="184" value="-0.419428" />
                                        <Key frame="191" value="-0.419428" />
                                        <Key frame="206" value="-0.419428" />
                                        <Key frame="212" value="-0.419428" />
                                        <Key frame="225" value="-0.419428" />
                                        <Key frame="229" value="-0.419428" />
                                        <Key frame="246" value="-0.419428" />
                                        <Key frame="255" value="-0.419428" />
                                        <Key frame="260" value="-0.419428" />
                                        <Key frame="267" value="-0.419428" />
                                        <Key frame="282" value="-0.419428" />
                                        <Key frame="288" value="-0.419428" />
                                        <Key frame="299" value="-0.419428" />
                                        <Key frame="305" value="-0.419428" />
                                        <Key frame="322" value="-0.419428" />
                                        <Key frame="328" value="-0.419428" />
                                        <Key frame="333" value="-0.419428" />
                                        <Key frame="345" value="-0.419428" />
                                        <Key frame="349" value="-0.419428" />
                                        <Key frame="362" value="-0.419428" />
                                        <Key frame="366" value="-0.419428" />
                                        <Key frame="377" value="-0.419428" />
                                        <Key frame="398" value="-0.419428" />
                                        <Key frame="406" value="-0.419428" />
                                        <Key frame="411" value="-0.419428" />
                                        <Key frame="422" value="-0.419428" />
                                        <Key frame="437" value="-0.419428" />
                                        <Key frame="445" value="-0.419428" />
                                        <Key frame="450" value="-0.419428" />
                                        <Key frame="459" value="-0.419428" />
                                        <Key frame="466" value="-0.419428" />
                                        <Key frame="473" value="-0.419428" />
                                        <Key frame="492" value="-0.419428" />
                                        <Key frame="500" value="-0.419428" />
                                        <Key frame="510" value="-0.419428" />
                                        <Key frame="517" value="-0.419428" />
                                        <Key frame="525" value="-0.419428" />
                                        <Key frame="530" value="-0.419428" />
                                        <Key frame="537" value="-0.419428" />
                                        <Key frame="552" value="-0.419428" />
                                        <Key frame="558" value="-0.419428" />
                                        <Key frame="569" value="-0.419428" />
                                        <Key frame="575" value="-0.419428" />
                                        <Key frame="595" value="-0.419428" />
                                        <Key frame="617" value="-0.419428" />
                                        <Key frame="623" value="-0.419428" />
                                        <Key frame="645" value="-0.419428" />
                                        <Key frame="658" value="-0.419428" />
                                        <Key frame="671" value="-0.419428" />
                                        <Key frame="674" value="-0.419428" />
                                        <Key frame="692" value="-0.419428" />
                                        <Key frame="696" value="-0.419428" />
                                        <Key frame="719" value="-0.419428" />
                                        <Key frame="723" value="-0.419428" />
                                        <Key frame="751" value="-0.419428" />
                                        <Key frame="761" value="-0.419428" />
                                        <Key frame="770" value="-2.05019" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="0" />
                                        <Key frame="8" value="0" />
                                        <Key frame="15" value="0" />
                                        <Key frame="26" value="0" />
                                        <Key frame="32" value="0" />
                                        <Key frame="43" value="0" />
                                        <Key frame="49" value="0" />
                                        <Key frame="64" value="0" />
                                        <Key frame="72" value="0" />
                                        <Key frame="77" value="0" />
                                        <Key frame="84" value="0" />
                                        <Key frame="95" value="0" />
                                        <Key frame="99" value="0" />
                                        <Key frame="110" value="0" />
                                        <Key frame="117" value="0" />
                                        <Key frame="128" value="0" />
                                        <Key frame="134" value="0" />
                                        <Key frame="150" value="0" />
                                        <Key frame="157" value="0" />
                                        <Key frame="162" value="0" />
                                        <Key frame="172" value="0" />
                                        <Key frame="184" value="0" />
                                        <Key frame="191" value="0" />
                                        <Key frame="206" value="0" />
                                        <Key frame="212" value="0" />
                                        <Key frame="225" value="0" />
                                        <Key frame="229" value="0" />
                                        <Key frame="246" value="0" />
                                        <Key frame="255" value="0" />
                                        <Key frame="260" value="0" />
                                        <Key frame="267" value="0" />
                                        <Key frame="282" value="0" />
                                        <Key frame="288" value="0" />
                                        <Key frame="299" value="0" />
                                        <Key frame="305" value="0" />
                                        <Key frame="322" value="0" />
                                        <Key frame="328" value="0" />
                                        <Key frame="333" value="0" />
                                        <Key frame="345" value="0" />
                                        <Key frame="349" value="0" />
                                        <Key frame="362" value="0" />
                                        <Key frame="366" value="0" />
                                        <Key frame="377" value="0" />
                                        <Key frame="398" value="0" />
                                        <Key frame="406" value="0" />
                                        <Key frame="411" value="0" />
                                        <Key frame="422" value="0" />
                                        <Key frame="437" value="0" />
                                        <Key frame="445" value="0" />
                                        <Key frame="450" value="0" />
                                        <Key frame="459" value="0" />
                                        <Key frame="466" value="0" />
                                        <Key frame="473" value="0" />
                                        <Key frame="492" value="0" />
                                        <Key frame="500" value="0" />
                                        <Key frame="510" value="0" />
                                        <Key frame="517" value="0" />
                                        <Key frame="525" value="0" />
                                        <Key frame="530" value="0" />
                                        <Key frame="537" value="0" />
                                        <Key frame="552" value="0" />
                                        <Key frame="558" value="0" />
                                        <Key frame="569" value="0" />
                                        <Key frame="575" value="0" />
                                        <Key frame="595" value="0" />
                                        <Key frame="617" value="0" />
                                        <Key frame="623" value="0" />
                                        <Key frame="645" value="0" />
                                        <Key frame="658" value="0" />
                                        <Key frame="671" value="0" />
                                        <Key frame="674" value="0" />
                                        <Key frame="692" value="0" />
                                        <Key frame="696" value="0" />
                                        <Key frame="719" value="0" />
                                        <Key frame="723" value="0" />
                                        <Key frame="751" value="0" />
                                        <Key frame="761" value="0" />
                                        <Key frame="770" value="-0.19976" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-0.506153" />
                                        <Key frame="8" value="29.5" />
                                        <Key frame="15" value="-25.3" />
                                        <Key frame="26" value="29.5" />
                                        <Key frame="32" value="-0.506153" />
                                        <Key frame="43" value="-0.506153" />
                                        <Key frame="49" value="-29.5" />
                                        <Key frame="64" value="-0.506153" />
                                        <Key frame="72" value="-0.506153" />
                                        <Key frame="77" value="-0.506153" />
                                        <Key frame="84" value="-0.506153" />
                                        <Key frame="95" value="-0.506153" />
                                        <Key frame="99" value="-0.506153" />
                                        <Key frame="110" value="-0.506153" />
                                        <Key frame="117" value="-0.506153" />
                                        <Key frame="128" value="-0.506153" />
                                        <Key frame="134" value="-0.506153" />
                                        <Key frame="150" value="-0.506153" />
                                        <Key frame="157" value="-0.506153" />
                                        <Key frame="162" value="-0.506153" />
                                        <Key frame="172" value="-0.506153" />
                                        <Key frame="184" value="-0.506153" />
                                        <Key frame="191" value="-0.506153" />
                                        <Key frame="206" value="29.5" />
                                        <Key frame="212" value="-0.506153" />
                                        <Key frame="225" value="29.5" />
                                        <Key frame="229" value="-29.5" />
                                        <Key frame="246" value="-0.506153" />
                                        <Key frame="255" value="-0.506153" />
                                        <Key frame="260" value="-0.506153" />
                                        <Key frame="267" value="-0.506153" />
                                        <Key frame="282" value="29.5" />
                                        <Key frame="288" value="-0.506153" />
                                        <Key frame="299" value="-0.506153" />
                                        <Key frame="305" value="-29.5" />
                                        <Key frame="322" value="-0.506153" />
                                        <Key frame="328" value="-0.506153" />
                                        <Key frame="333" value="-0.506153" />
                                        <Key frame="345" value="-0.506153" />
                                        <Key frame="349" value="-25.3" />
                                        <Key frame="362" value="-29.5" />
                                        <Key frame="366" value="-0.506153" />
                                        <Key frame="377" value="-0.506153" />
                                        <Key frame="398" value="-0.506153" />
                                        <Key frame="406" value="-0.506153" />
                                        <Key frame="411" value="-0.506153" />
                                        <Key frame="422" value="-29.5" />
                                        <Key frame="437" value="-0.506153" />
                                        <Key frame="445" value="-0.506153" />
                                        <Key frame="450" value="-0.506153" />
                                        <Key frame="459" value="29.5" />
                                        <Key frame="466" value="-25.3" />
                                        <Key frame="473" value="29.5" />
                                        <Key frame="492" value="-0.506153" />
                                        <Key frame="500" value="-0.506153" />
                                        <Key frame="510" value="-0.506153" />
                                        <Key frame="517" value="-0.506153" />
                                        <Key frame="525" value="-0.506153" />
                                        <Key frame="530" value="-0.506153" />
                                        <Key frame="537" value="-0.506153" />
                                        <Key frame="552" value="29.5" />
                                        <Key frame="558" value="-0.506153" />
                                        <Key frame="569" value="-0.506153" />
                                        <Key frame="575" value="-29.5" />
                                        <Key frame="595" value="-25.3" />
                                        <Key frame="617" value="-25.3" />
                                        <Key frame="623" value="-0.506153" />
                                        <Key frame="645" value="-0.506153" />
                                        <Key frame="658" value="29.5" />
                                        <Key frame="671" value="-0.506153" />
                                        <Key frame="674" value="-0.506153" />
                                        <Key frame="692" value="-25.3" />
                                        <Key frame="696" value="-0.506153" />
                                        <Key frame="719" value="-0.506153" />
                                        <Key frame="723" value="29.5" />
                                        <Key frame="751" value="-29.5" />
                                        <Key frame="761" value="-0.506153" />
                                        <Key frame="770" value="-0.283554" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-24.5" />
                                        <Key frame="8" value="-45.4" />
                                        <Key frame="15" value="-24.5" />
                                        <Key frame="26" value="-45.4" />
                                        <Key frame="32" value="-24.5" />
                                        <Key frame="43" value="-45.4" />
                                        <Key frame="49" value="-24.5" />
                                        <Key frame="64" value="-45.4" />
                                        <Key frame="72" value="-45.4" />
                                        <Key frame="77" value="-24.5" />
                                        <Key frame="84" value="-45.4" />
                                        <Key frame="95" value="-45.4" />
                                        <Key frame="99" value="-24.5" />
                                        <Key frame="110" value="-45.4" />
                                        <Key frame="117" value="-24.5" />
                                        <Key frame="128" value="-45.4" />
                                        <Key frame="134" value="-24.5" />
                                        <Key frame="150" value="-45.4" />
                                        <Key frame="157" value="-45.4" />
                                        <Key frame="162" value="-24.5" />
                                        <Key frame="172" value="-45.4" />
                                        <Key frame="184" value="-24.5" />
                                        <Key frame="191" value="-45.4" />
                                        <Key frame="206" value="-45.4" />
                                        <Key frame="212" value="-24.5" />
                                        <Key frame="225" value="-45.4" />
                                        <Key frame="229" value="-24.5" />
                                        <Key frame="246" value="-45.4" />
                                        <Key frame="255" value="-45.4" />
                                        <Key frame="260" value="-24.5" />
                                        <Key frame="267" value="-45.4" />
                                        <Key frame="282" value="-45.4" />
                                        <Key frame="288" value="-24.5" />
                                        <Key frame="299" value="-45.4" />
                                        <Key frame="305" value="-24.5" />
                                        <Key frame="322" value="-45.4" />
                                        <Key frame="328" value="-45.4" />
                                        <Key frame="333" value="-24.5" />
                                        <Key frame="345" value="-45.4" />
                                        <Key frame="349" value="-24.5" />
                                        <Key frame="362" value="-45.4" />
                                        <Key frame="366" value="-24.5" />
                                        <Key frame="377" value="-45.4" />
                                        <Key frame="398" value="-45.4" />
                                        <Key frame="406" value="-45.4" />
                                        <Key frame="411" value="-24.5" />
                                        <Key frame="422" value="-24.5" />
                                        <Key frame="437" value="-45.4" />
                                        <Key frame="445" value="-45.4" />
                                        <Key frame="450" value="-24.5" />
                                        <Key frame="459" value="-45.4" />
                                        <Key frame="466" value="-24.5" />
                                        <Key frame="473" value="-45.4" />
                                        <Key frame="492" value="-45.4" />
                                        <Key frame="500" value="-45.4" />
                                        <Key frame="510" value="-24.5" />
                                        <Key frame="517" value="-45.4" />
                                        <Key frame="525" value="-45.4" />
                                        <Key frame="530" value="-24.5" />
                                        <Key frame="537" value="-45.4" />
                                        <Key frame="552" value="-45.4" />
                                        <Key frame="558" value="-24.5" />
                                        <Key frame="569" value="-45.4" />
                                        <Key frame="575" value="-24.5" />
                                        <Key frame="595" value="-24.5" />
                                        <Key frame="617" value="-24.5" />
                                        <Key frame="623" value="-45.4" />
                                        <Key frame="645" value="-45.4" />
                                        <Key frame="658" value="-45.4" />
                                        <Key frame="671" value="-45.4" />
                                        <Key frame="674" value="-45.4" />
                                        <Key frame="692" value="-24.5" />
                                        <Key frame="696" value="-45.4" />
                                        <Key frame="719" value="-24.5" />
                                        <Key frame="723" value="-45.4" />
                                        <Key frame="751" value="-45.4" />
                                        <Key frame="761" value="-24.5" />
                                        <Key frame="770" value="-6.10802" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-119.5" />
                                        <Key frame="8" value="-119.5" />
                                        <Key frame="15" value="-119.5" />
                                        <Key frame="26" value="-119.5" />
                                        <Key frame="32" value="-119.5" />
                                        <Key frame="43" value="-119.5" />
                                        <Key frame="49" value="-119.5" />
                                        <Key frame="64" value="-119.5" />
                                        <Key frame="72" value="-119.5" />
                                        <Key frame="77" value="-119.5" />
                                        <Key frame="84" value="-119.5" />
                                        <Key frame="95" value="-119.5" />
                                        <Key frame="99" value="-119.5" />
                                        <Key frame="110" value="-119.5" />
                                        <Key frame="117" value="-119.5" />
                                        <Key frame="128" value="-119.5" />
                                        <Key frame="134" value="-119.5" />
                                        <Key frame="150" value="-119.5" />
                                        <Key frame="157" value="-119.5" />
                                        <Key frame="162" value="-119.5" />
                                        <Key frame="172" value="-119.5" />
                                        <Key frame="184" value="-119.5" />
                                        <Key frame="191" value="-119.5" />
                                        <Key frame="206" value="-119.5" />
                                        <Key frame="212" value="-119.5" />
                                        <Key frame="225" value="-119.5" />
                                        <Key frame="229" value="-119.5" />
                                        <Key frame="246" value="-119.5" />
                                        <Key frame="255" value="-119.5" />
                                        <Key frame="260" value="-119.5" />
                                        <Key frame="267" value="-119.5" />
                                        <Key frame="282" value="-119.5" />
                                        <Key frame="288" value="-119.5" />
                                        <Key frame="299" value="-119.5" />
                                        <Key frame="305" value="-119.5" />
                                        <Key frame="322" value="-119.5" />
                                        <Key frame="328" value="-119.5" />
                                        <Key frame="333" value="-119.5" />
                                        <Key frame="345" value="-119.5" />
                                        <Key frame="349" value="-119.5" />
                                        <Key frame="362" value="-119.5" />
                                        <Key frame="366" value="-119.5" />
                                        <Key frame="377" value="-119.5" />
                                        <Key frame="398" value="-119.5" />
                                        <Key frame="406" value="-119.5" />
                                        <Key frame="411" value="-119.5" />
                                        <Key frame="422" value="-119.5" />
                                        <Key frame="437" value="-119.5" />
                                        <Key frame="445" value="-119.5" />
                                        <Key frame="450" value="-119.5" />
                                        <Key frame="459" value="-119.5" />
                                        <Key frame="466" value="-119.5" />
                                        <Key frame="473" value="-119.5" />
                                        <Key frame="492" value="-119.5" />
                                        <Key frame="500" value="-119.5" />
                                        <Key frame="510" value="-119.5" />
                                        <Key frame="517" value="-119.5" />
                                        <Key frame="525" value="-119.5" />
                                        <Key frame="530" value="-119.5" />
                                        <Key frame="537" value="-119.5" />
                                        <Key frame="552" value="-119.5" />
                                        <Key frame="558" value="-119.5" />
                                        <Key frame="569" value="-119.5" />
                                        <Key frame="575" value="-119.5" />
                                        <Key frame="595" value="-119.5" />
                                        <Key frame="617" value="-119.5" />
                                        <Key frame="623" value="-119.5" />
                                        <Key frame="645" value="-119.5" />
                                        <Key frame="658" value="-119.5" />
                                        <Key frame="671" value="-119.5" />
                                        <Key frame="674" value="-119.5" />
                                        <Key frame="692" value="-119.5" />
                                        <Key frame="696" value="-119.5" />
                                        <Key frame="719" value="-119.5" />
                                        <Key frame="723" value="-119.5" />
                                        <Key frame="751" value="-119.5" />
                                        <Key frame="761" value="-119.5" />
                                        <Key frame="770" value="-98.3973" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="4" value="0.52" />
                                        <Key frame="8" value="0.66" />
                                        <Key frame="15" value="0.52" />
                                        <Key frame="26" value="0.66" />
                                        <Key frame="32" value="0.52" />
                                        <Key frame="43" value="0.66" />
                                        <Key frame="49" value="0.52" />
                                        <Key frame="64" value="0.66" />
                                        <Key frame="72" value="0.66" />
                                        <Key frame="77" value="0.52" />
                                        <Key frame="84" value="0.66" />
                                        <Key frame="95" value="0.66" />
                                        <Key frame="99" value="0.52" />
                                        <Key frame="110" value="0.66" />
                                        <Key frame="117" value="0.52" />
                                        <Key frame="128" value="0.66" />
                                        <Key frame="134" value="0.52" />
                                        <Key frame="150" value="0.66" />
                                        <Key frame="157" value="0.66" />
                                        <Key frame="162" value="0.52" />
                                        <Key frame="172" value="0.66" />
                                        <Key frame="184" value="0.52" />
                                        <Key frame="191" value="0.66" />
                                        <Key frame="206" value="0.66" />
                                        <Key frame="212" value="0.52" />
                                        <Key frame="225" value="0.66" />
                                        <Key frame="229" value="0.52" />
                                        <Key frame="246" value="0.66" />
                                        <Key frame="255" value="0.66" />
                                        <Key frame="260" value="0.52" />
                                        <Key frame="267" value="0.66" />
                                        <Key frame="282" value="0.66" />
                                        <Key frame="288" value="0.52" />
                                        <Key frame="299" value="0.66" />
                                        <Key frame="305" value="0.52" />
                                        <Key frame="322" value="0.66" />
                                        <Key frame="328" value="0.66" />
                                        <Key frame="333" value="0.52" />
                                        <Key frame="345" value="0.66" />
                                        <Key frame="349" value="0.52" />
                                        <Key frame="362" value="0.66" />
                                        <Key frame="366" value="0.52" />
                                        <Key frame="377" value="0.66" />
                                        <Key frame="398" value="0.66" />
                                        <Key frame="406" value="0.66" />
                                        <Key frame="411" value="0.52" />
                                        <Key frame="422" value="0.52" />
                                        <Key frame="437" value="0.66" />
                                        <Key frame="445" value="0.66" />
                                        <Key frame="450" value="0.52" />
                                        <Key frame="459" value="0.66" />
                                        <Key frame="466" value="0.52" />
                                        <Key frame="473" value="0.66" />
                                        <Key frame="492" value="0.66" />
                                        <Key frame="500" value="0.66" />
                                        <Key frame="510" value="0.52" />
                                        <Key frame="517" value="0.66" />
                                        <Key frame="525" value="0.66" />
                                        <Key frame="530" value="0.52" />
                                        <Key frame="537" value="0.66" />
                                        <Key frame="552" value="0.66" />
                                        <Key frame="558" value="0.52" />
                                        <Key frame="569" value="0.66" />
                                        <Key frame="575" value="0.52" />
                                        <Key frame="595" value="0.52" />
                                        <Key frame="617" value="0.52" />
                                        <Key frame="623" value="0.66" />
                                        <Key frame="645" value="0.66" />
                                        <Key frame="658" value="0.66" />
                                        <Key frame="671" value="0.66" />
                                        <Key frame="674" value="0.66" />
                                        <Key frame="692" value="0.52" />
                                        <Key frame="696" value="0.66" />
                                        <Key frame="719" value="0.52" />
                                        <Key frame="723" value="0.66" />
                                        <Key frame="751" value="0.66" />
                                        <Key frame="761" value="0.52" />
                                        <Key frame="770" value="0.6942" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-17.3" />
                                        <Key frame="8" value="7.6" />
                                        <Key frame="15" value="-17.3" />
                                        <Key frame="26" value="7.6" />
                                        <Key frame="32" value="-17.3" />
                                        <Key frame="43" value="7.6" />
                                        <Key frame="49" value="-17.3" />
                                        <Key frame="64" value="7.6" />
                                        <Key frame="72" value="7.6" />
                                        <Key frame="77" value="-17.3" />
                                        <Key frame="84" value="7.6" />
                                        <Key frame="95" value="7.6" />
                                        <Key frame="99" value="-17.3" />
                                        <Key frame="110" value="7.6" />
                                        <Key frame="117" value="-17.3" />
                                        <Key frame="128" value="7.6" />
                                        <Key frame="134" value="-17.3" />
                                        <Key frame="150" value="7.6" />
                                        <Key frame="157" value="7.6" />
                                        <Key frame="162" value="-17.3" />
                                        <Key frame="172" value="7.6" />
                                        <Key frame="184" value="-17.3" />
                                        <Key frame="191" value="7.6" />
                                        <Key frame="206" value="7.6" />
                                        <Key frame="212" value="-17.3" />
                                        <Key frame="225" value="7.6" />
                                        <Key frame="229" value="-17.3" />
                                        <Key frame="246" value="7.6" />
                                        <Key frame="255" value="7.6" />
                                        <Key frame="260" value="-17.3" />
                                        <Key frame="267" value="7.6" />
                                        <Key frame="282" value="7.6" />
                                        <Key frame="288" value="-17.3" />
                                        <Key frame="299" value="7.6" />
                                        <Key frame="305" value="-17.3" />
                                        <Key frame="322" value="7.6" />
                                        <Key frame="328" value="7.6" />
                                        <Key frame="333" value="-17.3" />
                                        <Key frame="345" value="7.6" />
                                        <Key frame="349" value="-17.3" />
                                        <Key frame="362" value="7.6" />
                                        <Key frame="366" value="-17.3" />
                                        <Key frame="377" value="7.6" />
                                        <Key frame="398" value="7.6" />
                                        <Key frame="406" value="7.6" />
                                        <Key frame="411" value="-17.3" />
                                        <Key frame="422" value="-17.3" />
                                        <Key frame="437" value="7.6" />
                                        <Key frame="445" value="7.6" />
                                        <Key frame="450" value="-17.3" />
                                        <Key frame="459" value="7.6" />
                                        <Key frame="466" value="-17.3" />
                                        <Key frame="473" value="7.6" />
                                        <Key frame="492" value="7.6" />
                                        <Key frame="500" value="7.6" />
                                        <Key frame="510" value="-17.3" />
                                        <Key frame="517" value="7.6" />
                                        <Key frame="525" value="7.6" />
                                        <Key frame="530" value="-17.3" />
                                        <Key frame="537" value="7.6" />
                                        <Key frame="552" value="7.6" />
                                        <Key frame="558" value="-17.3" />
                                        <Key frame="569" value="7.6" />
                                        <Key frame="575" value="-17.3" />
                                        <Key frame="595" value="-17.3" />
                                        <Key frame="617" value="-17.3" />
                                        <Key frame="623" value="7.6" />
                                        <Key frame="645" value="7.6" />
                                        <Key frame="658" value="7.6" />
                                        <Key frame="671" value="7.6" />
                                        <Key frame="674" value="7.6" />
                                        <Key frame="692" value="-17.3" />
                                        <Key frame="696" value="7.6" />
                                        <Key frame="719" value="-17.3" />
                                        <Key frame="723" value="7.6" />
                                        <Key frame="751" value="7.6" />
                                        <Key frame="761" value="-17.3" />
                                        <Key frame="770" value="101.318" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="37.5" />
                                        <Key frame="8" value="37.5" />
                                        <Key frame="15" value="37.5" />
                                        <Key frame="26" value="37.5" />
                                        <Key frame="32" value="37.5" />
                                        <Key frame="43" value="37.5" />
                                        <Key frame="49" value="37.5" />
                                        <Key frame="64" value="37.5" />
                                        <Key frame="72" value="37.5" />
                                        <Key frame="77" value="37.5" />
                                        <Key frame="84" value="37.5" />
                                        <Key frame="95" value="26.9" />
                                        <Key frame="99" value="37.5" />
                                        <Key frame="110" value="37.5" />
                                        <Key frame="117" value="37.5" />
                                        <Key frame="128" value="37.5" />
                                        <Key frame="134" value="37.5" />
                                        <Key frame="150" value="37.5" />
                                        <Key frame="157" value="37.5" />
                                        <Key frame="162" value="37.5" />
                                        <Key frame="172" value="37.5" />
                                        <Key frame="184" value="37.5" />
                                        <Key frame="191" value="26.9" />
                                        <Key frame="206" value="37.5" />
                                        <Key frame="212" value="37.5" />
                                        <Key frame="225" value="37.5" />
                                        <Key frame="229" value="37.5" />
                                        <Key frame="246" value="37.5" />
                                        <Key frame="255" value="37.5" />
                                        <Key frame="260" value="37.5" />
                                        <Key frame="267" value="26.9" />
                                        <Key frame="282" value="37.5" />
                                        <Key frame="288" value="37.5" />
                                        <Key frame="299" value="37.5" />
                                        <Key frame="305" value="37.5" />
                                        <Key frame="322" value="37.5" />
                                        <Key frame="328" value="37.5" />
                                        <Key frame="333" value="37.5" />
                                        <Key frame="345" value="26.9" />
                                        <Key frame="349" value="37.5" />
                                        <Key frame="362" value="37.5" />
                                        <Key frame="366" value="37.5" />
                                        <Key frame="377" value="37.5" />
                                        <Key frame="398" value="37.5" />
                                        <Key frame="406" value="37.5" />
                                        <Key frame="411" value="37.5" />
                                        <Key frame="422" value="37.5" />
                                        <Key frame="437" value="37.5" />
                                        <Key frame="445" value="37.5" />
                                        <Key frame="450" value="37.5" />
                                        <Key frame="459" value="37.5" />
                                        <Key frame="466" value="37.5" />
                                        <Key frame="473" value="37.5" />
                                        <Key frame="492" value="37.5" />
                                        <Key frame="500" value="37.5" />
                                        <Key frame="510" value="37.5" />
                                        <Key frame="517" value="26.9" />
                                        <Key frame="525" value="37.5" />
                                        <Key frame="530" value="37.5" />
                                        <Key frame="537" value="26.9" />
                                        <Key frame="552" value="37.5" />
                                        <Key frame="558" value="37.5" />
                                        <Key frame="569" value="37.5" />
                                        <Key frame="575" value="37.5" />
                                        <Key frame="595" value="37.5" />
                                        <Key frame="617" value="37.5" />
                                        <Key frame="623" value="37.5" />
                                        <Key frame="645" value="37.5" />
                                        <Key frame="658" value="37.5" />
                                        <Key frame="671" value="37.5" />
                                        <Key frame="674" value="37.5" />
                                        <Key frame="692" value="37.5" />
                                        <Key frame="696" value="37.5" />
                                        <Key frame="719" value="37.5" />
                                        <Key frame="723" value="37.5" />
                                        <Key frame="751" value="37.5" />
                                        <Key frame="761" value="37.5" />
                                        <Key frame="770" value="5.36555" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-17.4" />
                                        <Key frame="8" value="-17.4" />
                                        <Key frame="15" value="-17.4" />
                                        <Key frame="26" value="-17.4" />
                                        <Key frame="32" value="-17.4" />
                                        <Key frame="43" value="-17.4" />
                                        <Key frame="49" value="-17.4" />
                                        <Key frame="64" value="-17.4" />
                                        <Key frame="72" value="-17.4" />
                                        <Key frame="77" value="-17.4" />
                                        <Key frame="84" value="-17.4" />
                                        <Key frame="95" value="-17.4" />
                                        <Key frame="99" value="-17.4" />
                                        <Key frame="110" value="-17.4" />
                                        <Key frame="117" value="-17.4" />
                                        <Key frame="128" value="-17.4" />
                                        <Key frame="134" value="-17.4" />
                                        <Key frame="150" value="-17.4" />
                                        <Key frame="157" value="-17.4" />
                                        <Key frame="162" value="-17.4" />
                                        <Key frame="172" value="-17.4" />
                                        <Key frame="184" value="-17.4" />
                                        <Key frame="191" value="-17.4" />
                                        <Key frame="206" value="-17.4" />
                                        <Key frame="212" value="-17.4" />
                                        <Key frame="225" value="-17.4" />
                                        <Key frame="229" value="-17.4" />
                                        <Key frame="246" value="-17.4" />
                                        <Key frame="255" value="-17.4" />
                                        <Key frame="260" value="-17.4" />
                                        <Key frame="267" value="-17.4" />
                                        <Key frame="282" value="-17.4" />
                                        <Key frame="288" value="-17.4" />
                                        <Key frame="299" value="-17.4" />
                                        <Key frame="305" value="-17.4" />
                                        <Key frame="322" value="-17.4" />
                                        <Key frame="328" value="-17.4" />
                                        <Key frame="333" value="-17.4" />
                                        <Key frame="345" value="-17.4" />
                                        <Key frame="349" value="-17.4" />
                                        <Key frame="362" value="-17.4" />
                                        <Key frame="366" value="-17.4" />
                                        <Key frame="377" value="-17.4" />
                                        <Key frame="398" value="-17.4" />
                                        <Key frame="406" value="-17.4" />
                                        <Key frame="411" value="-17.4" />
                                        <Key frame="422" value="-17.4" />
                                        <Key frame="437" value="-17.4" />
                                        <Key frame="445" value="-17.4" />
                                        <Key frame="450" value="-17.4" />
                                        <Key frame="459" value="-17.4" />
                                        <Key frame="466" value="-17.4" />
                                        <Key frame="473" value="-17.4" />
                                        <Key frame="492" value="-17.4" />
                                        <Key frame="500" value="-17.4" />
                                        <Key frame="510" value="-17.4" />
                                        <Key frame="517" value="-17.4" />
                                        <Key frame="525" value="-17.4" />
                                        <Key frame="530" value="-17.4" />
                                        <Key frame="537" value="-17.4" />
                                        <Key frame="552" value="-17.4" />
                                        <Key frame="558" value="-17.4" />
                                        <Key frame="569" value="-17.4" />
                                        <Key frame="575" value="-17.4" />
                                        <Key frame="595" value="-17.4" />
                                        <Key frame="617" value="-17.4" />
                                        <Key frame="623" value="-17.4" />
                                        <Key frame="645" value="-17.4" />
                                        <Key frame="658" value="-17.4" />
                                        <Key frame="671" value="-17.4" />
                                        <Key frame="674" value="-17.4" />
                                        <Key frame="692" value="-17.4" />
                                        <Key frame="696" value="-17.4" />
                                        <Key frame="719" value="-17.4" />
                                        <Key frame="723" value="-17.4" />
                                        <Key frame="751" value="-17.4" />
                                        <Key frame="761" value="-17.4" />
                                        <Key frame="770" value="2.18728" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="85.1" />
                                        <Key frame="8" value="85.1" />
                                        <Key frame="15" value="85.1" />
                                        <Key frame="26" value="85.1" />
                                        <Key frame="32" value="85.1" />
                                        <Key frame="43" value="85.1" />
                                        <Key frame="49" value="85.1" />
                                        <Key frame="64" value="85.1" />
                                        <Key frame="72" value="85.1" />
                                        <Key frame="77" value="85.1" />
                                        <Key frame="84" value="85.1" />
                                        <Key frame="95" value="85.1" />
                                        <Key frame="99" value="85.1" />
                                        <Key frame="110" value="85.1" />
                                        <Key frame="117" value="85.1" />
                                        <Key frame="128" value="85.1" />
                                        <Key frame="134" value="85.1" />
                                        <Key frame="150" value="85.1" />
                                        <Key frame="157" value="85.1" />
                                        <Key frame="162" value="85.1" />
                                        <Key frame="172" value="85.1" />
                                        <Key frame="184" value="85.1" />
                                        <Key frame="191" value="85.1" />
                                        <Key frame="206" value="85.1" />
                                        <Key frame="212" value="85.1" />
                                        <Key frame="225" value="85.1" />
                                        <Key frame="229" value="85.1" />
                                        <Key frame="246" value="85.1" />
                                        <Key frame="255" value="85.1" />
                                        <Key frame="260" value="85.1" />
                                        <Key frame="267" value="85.1" />
                                        <Key frame="282" value="85.1" />
                                        <Key frame="288" value="85.1" />
                                        <Key frame="299" value="85.1" />
                                        <Key frame="305" value="85.1" />
                                        <Key frame="322" value="85.1" />
                                        <Key frame="328" value="85.1" />
                                        <Key frame="333" value="85.1" />
                                        <Key frame="345" value="85.1" />
                                        <Key frame="349" value="85.1" />
                                        <Key frame="362" value="85.1" />
                                        <Key frame="366" value="85.1" />
                                        <Key frame="377" value="85.1" />
                                        <Key frame="398" value="85.1" />
                                        <Key frame="406" value="85.1" />
                                        <Key frame="411" value="85.1" />
                                        <Key frame="422" value="85.1" />
                                        <Key frame="437" value="85.1" />
                                        <Key frame="445" value="85.1" />
                                        <Key frame="450" value="85.1" />
                                        <Key frame="459" value="85.1" />
                                        <Key frame="466" value="85.1" />
                                        <Key frame="473" value="85.1" />
                                        <Key frame="492" value="85.1" />
                                        <Key frame="500" value="85.1" />
                                        <Key frame="510" value="85.1" />
                                        <Key frame="517" value="85.1" />
                                        <Key frame="525" value="85.1" />
                                        <Key frame="530" value="85.1" />
                                        <Key frame="537" value="85.1" />
                                        <Key frame="552" value="85.1" />
                                        <Key frame="558" value="85.1" />
                                        <Key frame="569" value="85.1" />
                                        <Key frame="575" value="85.1" />
                                        <Key frame="595" value="85.1" />
                                        <Key frame="617" value="85.1" />
                                        <Key frame="623" value="85.1" />
                                        <Key frame="645" value="85.1" />
                                        <Key frame="658" value="85.1" />
                                        <Key frame="671" value="85.1" />
                                        <Key frame="674" value="85.1" />
                                        <Key frame="692" value="85.1" />
                                        <Key frame="696" value="85.1" />
                                        <Key frame="719" value="85.1" />
                                        <Key frame="723" value="85.1" />
                                        <Key frame="751" value="85.1" />
                                        <Key frame="761" value="85.1" />
                                        <Key frame="770" value="5.69065" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="17.7" />
                                        <Key frame="8" value="17.7" />
                                        <Key frame="15" value="17.7" />
                                        <Key frame="26" value="17.7" />
                                        <Key frame="32" value="17.7" />
                                        <Key frame="43" value="17.7" />
                                        <Key frame="49" value="17.7" />
                                        <Key frame="64" value="17.7" />
                                        <Key frame="72" value="17.7" />
                                        <Key frame="77" value="17.7" />
                                        <Key frame="84" value="17.7" />
                                        <Key frame="95" value="17.7" />
                                        <Key frame="99" value="17.7" />
                                        <Key frame="110" value="17.7" />
                                        <Key frame="117" value="17.7" />
                                        <Key frame="128" value="17.7" />
                                        <Key frame="134" value="17.7" />
                                        <Key frame="150" value="17.7" />
                                        <Key frame="157" value="17.7" />
                                        <Key frame="162" value="17.7" />
                                        <Key frame="172" value="17.7" />
                                        <Key frame="184" value="17.7" />
                                        <Key frame="191" value="17.7" />
                                        <Key frame="206" value="17.7" />
                                        <Key frame="212" value="17.7" />
                                        <Key frame="225" value="17.7" />
                                        <Key frame="229" value="17.7" />
                                        <Key frame="246" value="17.7" />
                                        <Key frame="255" value="17.7" />
                                        <Key frame="260" value="17.7" />
                                        <Key frame="267" value="17.7" />
                                        <Key frame="282" value="17.7" />
                                        <Key frame="288" value="17.7" />
                                        <Key frame="299" value="17.7" />
                                        <Key frame="305" value="17.7" />
                                        <Key frame="322" value="17.7" />
                                        <Key frame="328" value="17.7" />
                                        <Key frame="333" value="17.7" />
                                        <Key frame="345" value="17.7" />
                                        <Key frame="349" value="17.7" />
                                        <Key frame="362" value="17.7" />
                                        <Key frame="366" value="17.7" />
                                        <Key frame="377" value="17.7" />
                                        <Key frame="398" value="17.7" />
                                        <Key frame="406" value="17.7" />
                                        <Key frame="411" value="17.7" />
                                        <Key frame="422" value="17.7" />
                                        <Key frame="437" value="17.7" />
                                        <Key frame="445" value="17.7" />
                                        <Key frame="450" value="17.7" />
                                        <Key frame="459" value="17.7" />
                                        <Key frame="466" value="17.7" />
                                        <Key frame="473" value="17.7" />
                                        <Key frame="492" value="17.7" />
                                        <Key frame="500" value="17.7" />
                                        <Key frame="510" value="17.7" />
                                        <Key frame="517" value="17.7" />
                                        <Key frame="525" value="17.7" />
                                        <Key frame="530" value="17.7" />
                                        <Key frame="537" value="17.7" />
                                        <Key frame="552" value="17.7" />
                                        <Key frame="558" value="17.7" />
                                        <Key frame="569" value="17.7" />
                                        <Key frame="575" value="17.7" />
                                        <Key frame="595" value="17.7" />
                                        <Key frame="617" value="17.7" />
                                        <Key frame="623" value="17.7" />
                                        <Key frame="645" value="17.7" />
                                        <Key frame="658" value="17.7" />
                                        <Key frame="671" value="17.7" />
                                        <Key frame="674" value="17.7" />
                                        <Key frame="692" value="17.7" />
                                        <Key frame="696" value="17.7" />
                                        <Key frame="719" value="17.7" />
                                        <Key frame="723" value="17.7" />
                                        <Key frame="751" value="17.7" />
                                        <Key frame="761" value="17.7" />
                                        <Key frame="770" value="97.3352" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="4" value="0.02" />
                                        <Key frame="8" value="0.02" />
                                        <Key frame="15" value="0.02" />
                                        <Key frame="26" value="0.02" />
                                        <Key frame="32" value="0.02" />
                                        <Key frame="43" value="0.02" />
                                        <Key frame="49" value="0.02" />
                                        <Key frame="64" value="0.02" />
                                        <Key frame="72" value="0.02" />
                                        <Key frame="77" value="0.02" />
                                        <Key frame="84" value="0.02" />
                                        <Key frame="95" value="0.12" />
                                        <Key frame="99" value="0.02" />
                                        <Key frame="110" value="0.02" />
                                        <Key frame="117" value="0.02" />
                                        <Key frame="128" value="0.02" />
                                        <Key frame="134" value="0.02" />
                                        <Key frame="150" value="0.02" />
                                        <Key frame="157" value="0.02" />
                                        <Key frame="162" value="0.02" />
                                        <Key frame="172" value="0.02" />
                                        <Key frame="184" value="0.02" />
                                        <Key frame="191" value="0.12" />
                                        <Key frame="206" value="0.02" />
                                        <Key frame="212" value="0.02" />
                                        <Key frame="225" value="0.02" />
                                        <Key frame="229" value="0.02" />
                                        <Key frame="246" value="0.02" />
                                        <Key frame="255" value="0.02" />
                                        <Key frame="260" value="0.02" />
                                        <Key frame="267" value="0.12" />
                                        <Key frame="282" value="0.02" />
                                        <Key frame="288" value="0.02" />
                                        <Key frame="299" value="0.02" />
                                        <Key frame="305" value="0.02" />
                                        <Key frame="322" value="0.02" />
                                        <Key frame="328" value="0.02" />
                                        <Key frame="333" value="0.02" />
                                        <Key frame="345" value="0.12" />
                                        <Key frame="349" value="0.02" />
                                        <Key frame="362" value="0.02" />
                                        <Key frame="366" value="0.02" />
                                        <Key frame="377" value="0.02" />
                                        <Key frame="398" value="0.02" />
                                        <Key frame="406" value="0.02" />
                                        <Key frame="411" value="0.02" />
                                        <Key frame="422" value="0.02" />
                                        <Key frame="437" value="0.02" />
                                        <Key frame="445" value="0.02" />
                                        <Key frame="450" value="0.02" />
                                        <Key frame="459" value="0.02" />
                                        <Key frame="466" value="0.02" />
                                        <Key frame="473" value="0.02" />
                                        <Key frame="492" value="0.02" />
                                        <Key frame="500" value="0.02" />
                                        <Key frame="510" value="0.02" />
                                        <Key frame="517" value="0.12" />
                                        <Key frame="525" value="0.02" />
                                        <Key frame="530" value="0.02" />
                                        <Key frame="537" value="0.12" />
                                        <Key frame="552" value="0.02" />
                                        <Key frame="558" value="0.02" />
                                        <Key frame="569" value="0.02" />
                                        <Key frame="575" value="0.02" />
                                        <Key frame="595" value="0.02" />
                                        <Key frame="617" value="0.02" />
                                        <Key frame="623" value="0.02" />
                                        <Key frame="645" value="0.02" />
                                        <Key frame="658" value="0.02" />
                                        <Key frame="671" value="0.02" />
                                        <Key frame="674" value="0.02" />
                                        <Key frame="692" value="0.02" />
                                        <Key frame="696" value="0.02" />
                                        <Key frame="719" value="0.02" />
                                        <Key frame="723" value="0.02" />
                                        <Key frame="751" value="0.02" />
                                        <Key frame="761" value="0.02" />
                                        <Key frame="770" value="0.688049" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="43" />
                                        <Key frame="8" value="102.3" />
                                        <Key frame="15" value="43" />
                                        <Key frame="26" value="102.3" />
                                        <Key frame="32" value="43" />
                                        <Key frame="43" value="102.3" />
                                        <Key frame="49" value="43" />
                                        <Key frame="64" value="102.3" />
                                        <Key frame="72" value="102.3" />
                                        <Key frame="77" value="43" />
                                        <Key frame="84" value="102.3" />
                                        <Key frame="95" value="102.3" />
                                        <Key frame="99" value="43" />
                                        <Key frame="110" value="102.3" />
                                        <Key frame="117" value="43" />
                                        <Key frame="128" value="102.3" />
                                        <Key frame="134" value="43" />
                                        <Key frame="150" value="102.3" />
                                        <Key frame="157" value="102.3" />
                                        <Key frame="162" value="43" />
                                        <Key frame="172" value="102.3" />
                                        <Key frame="184" value="43" />
                                        <Key frame="191" value="102.3" />
                                        <Key frame="206" value="102.3" />
                                        <Key frame="212" value="43" />
                                        <Key frame="225" value="102.3" />
                                        <Key frame="229" value="43" />
                                        <Key frame="246" value="102.3" />
                                        <Key frame="255" value="102.3" />
                                        <Key frame="260" value="43" />
                                        <Key frame="267" value="102.3" />
                                        <Key frame="282" value="102.3" />
                                        <Key frame="288" value="43" />
                                        <Key frame="299" value="102.3" />
                                        <Key frame="305" value="43" />
                                        <Key frame="322" value="102.3" />
                                        <Key frame="328" value="102.3" />
                                        <Key frame="333" value="43" />
                                        <Key frame="345" value="102.3" />
                                        <Key frame="349" value="43" />
                                        <Key frame="362" value="102.3" />
                                        <Key frame="366" value="43" />
                                        <Key frame="377" value="102.3" />
                                        <Key frame="398" value="102.3" />
                                        <Key frame="406" value="102.3" />
                                        <Key frame="411" value="43" />
                                        <Key frame="422" value="43" />
                                        <Key frame="437" value="102.3" />
                                        <Key frame="445" value="102.3" />
                                        <Key frame="450" value="43" />
                                        <Key frame="459" value="102.3" />
                                        <Key frame="466" value="43" />
                                        <Key frame="473" value="102.3" />
                                        <Key frame="492" value="102.3" />
                                        <Key frame="500" value="102.3" />
                                        <Key frame="510" value="43" />
                                        <Key frame="517" value="102.3" />
                                        <Key frame="525" value="102.3" />
                                        <Key frame="530" value="43" />
                                        <Key frame="537" value="102.3" />
                                        <Key frame="552" value="102.3" />
                                        <Key frame="558" value="43" />
                                        <Key frame="569" value="102.3" />
                                        <Key frame="575" value="43" />
                                        <Key frame="595" value="43" />
                                        <Key frame="617" value="43" />
                                        <Key frame="623" value="102.3" />
                                        <Key frame="645" value="102.3" />
                                        <Key frame="658" value="102.3" />
                                        <Key frame="671" value="102.3" />
                                        <Key frame="674" value="102.3" />
                                        <Key frame="692" value="43" />
                                        <Key frame="696" value="102.3" />
                                        <Key frame="719" value="43" />
                                        <Key frame="723" value="102.3" />
                                        <Key frame="751" value="102.3" />
                                        <Key frame="761" value="43" />
                                        <Key frame="770" value="100.169" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-11.3" />
                                        <Key frame="8" value="-40.7" />
                                        <Key frame="15" value="-11.3" />
                                        <Key frame="26" value="-40.7" />
                                        <Key frame="32" value="-11.3" />
                                        <Key frame="43" value="-40.7" />
                                        <Key frame="49" value="-11.3" />
                                        <Key frame="64" value="-40.7" />
                                        <Key frame="72" value="-40.7" />
                                        <Key frame="77" value="-11.3" />
                                        <Key frame="84" value="-40.7" />
                                        <Key frame="95" value="-63.2" />
                                        <Key frame="99" value="-11.3" />
                                        <Key frame="110" value="-40.7" />
                                        <Key frame="117" value="-11.3" />
                                        <Key frame="128" value="-40.7" />
                                        <Key frame="134" value="-11.3" />
                                        <Key frame="150" value="-40.7" />
                                        <Key frame="157" value="-40.7" />
                                        <Key frame="162" value="-11.3" />
                                        <Key frame="172" value="-40.7" />
                                        <Key frame="184" value="-11.3" />
                                        <Key frame="191" value="-63.2" />
                                        <Key frame="206" value="-40.7" />
                                        <Key frame="212" value="-11.3" />
                                        <Key frame="225" value="-40.7" />
                                        <Key frame="229" value="-11.3" />
                                        <Key frame="246" value="-40.7" />
                                        <Key frame="255" value="-40.7" />
                                        <Key frame="260" value="-11.3" />
                                        <Key frame="267" value="-63.2" />
                                        <Key frame="282" value="-40.7" />
                                        <Key frame="288" value="-11.3" />
                                        <Key frame="299" value="-40.7" />
                                        <Key frame="305" value="-11.3" />
                                        <Key frame="322" value="-40.7" />
                                        <Key frame="328" value="-40.7" />
                                        <Key frame="333" value="-11.3" />
                                        <Key frame="345" value="-63.2" />
                                        <Key frame="349" value="-11.3" />
                                        <Key frame="362" value="-40.7" />
                                        <Key frame="366" value="-11.3" />
                                        <Key frame="377" value="-40.7" />
                                        <Key frame="398" value="-40.7" />
                                        <Key frame="406" value="-40.7" />
                                        <Key frame="411" value="-11.3" />
                                        <Key frame="422" value="-11.3" />
                                        <Key frame="437" value="-40.7" />
                                        <Key frame="445" value="-40.7" />
                                        <Key frame="450" value="-11.3" />
                                        <Key frame="459" value="-40.7" />
                                        <Key frame="466" value="-11.3" />
                                        <Key frame="473" value="-40.7" />
                                        <Key frame="492" value="-40.7" />
                                        <Key frame="500" value="-40.7" />
                                        <Key frame="510" value="-11.3" />
                                        <Key frame="517" value="-63.2" />
                                        <Key frame="525" value="-40.7" />
                                        <Key frame="530" value="-11.3" />
                                        <Key frame="537" value="-63.2" />
                                        <Key frame="552" value="-40.7" />
                                        <Key frame="558" value="-11.3" />
                                        <Key frame="569" value="-40.7" />
                                        <Key frame="575" value="-11.3" />
                                        <Key frame="595" value="-11.3" />
                                        <Key frame="617" value="-11.3" />
                                        <Key frame="623" value="-40.7" />
                                        <Key frame="645" value="-40.7" />
                                        <Key frame="658" value="-40.7" />
                                        <Key frame="671" value="-40.7" />
                                        <Key frame="674" value="-40.7" />
                                        <Key frame="692" value="-11.3" />
                                        <Key frame="696" value="-40.7" />
                                        <Key frame="719" value="-11.3" />
                                        <Key frame="723" value="-40.7" />
                                        <Key frame="751" value="-40.7" />
                                        <Key frame="761" value="-11.3" />
                                        <Key frame="770" value="-5.40298" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="40.6" />
                                        <Key frame="8" value="40.6" />
                                        <Key frame="15" value="40.6" />
                                        <Key frame="26" value="40.6" />
                                        <Key frame="32" value="40.6" />
                                        <Key frame="43" value="40.6" />
                                        <Key frame="49" value="40.6" />
                                        <Key frame="64" value="40.6" />
                                        <Key frame="72" value="40.6" />
                                        <Key frame="77" value="40.6" />
                                        <Key frame="84" value="40.6" />
                                        <Key frame="95" value="40.6" />
                                        <Key frame="99" value="40.6" />
                                        <Key frame="110" value="40.6" />
                                        <Key frame="117" value="40.6" />
                                        <Key frame="128" value="40.6" />
                                        <Key frame="134" value="40.6" />
                                        <Key frame="150" value="40.6" />
                                        <Key frame="157" value="40.6" />
                                        <Key frame="162" value="40.6" />
                                        <Key frame="172" value="40.6" />
                                        <Key frame="184" value="40.6" />
                                        <Key frame="191" value="40.6" />
                                        <Key frame="206" value="40.6" />
                                        <Key frame="212" value="40.6" />
                                        <Key frame="225" value="40.6" />
                                        <Key frame="229" value="40.6" />
                                        <Key frame="246" value="40.6" />
                                        <Key frame="255" value="40.6" />
                                        <Key frame="260" value="40.6" />
                                        <Key frame="267" value="40.6" />
                                        <Key frame="282" value="40.6" />
                                        <Key frame="288" value="40.6" />
                                        <Key frame="299" value="40.6" />
                                        <Key frame="305" value="40.6" />
                                        <Key frame="322" value="40.6" />
                                        <Key frame="328" value="40.6" />
                                        <Key frame="333" value="40.6" />
                                        <Key frame="345" value="40.6" />
                                        <Key frame="349" value="40.6" />
                                        <Key frame="362" value="40.6" />
                                        <Key frame="366" value="40.6" />
                                        <Key frame="377" value="40.6" />
                                        <Key frame="398" value="40.6" />
                                        <Key frame="406" value="40.6" />
                                        <Key frame="411" value="40.6" />
                                        <Key frame="422" value="40.6" />
                                        <Key frame="437" value="40.6" />
                                        <Key frame="445" value="40.6" />
                                        <Key frame="450" value="40.6" />
                                        <Key frame="459" value="40.6" />
                                        <Key frame="466" value="40.6" />
                                        <Key frame="473" value="40.6" />
                                        <Key frame="492" value="40.6" />
                                        <Key frame="500" value="40.6" />
                                        <Key frame="510" value="40.6" />
                                        <Key frame="517" value="40.6" />
                                        <Key frame="525" value="40.6" />
                                        <Key frame="530" value="40.6" />
                                        <Key frame="537" value="40.6" />
                                        <Key frame="552" value="40.6" />
                                        <Key frame="558" value="40.6" />
                                        <Key frame="569" value="40.6" />
                                        <Key frame="575" value="40.6" />
                                        <Key frame="595" value="40.6" />
                                        <Key frame="617" value="40.6" />
                                        <Key frame="623" value="40.6" />
                                        <Key frame="645" value="40.6" />
                                        <Key frame="658" value="40.6" />
                                        <Key frame="671" value="40.6" />
                                        <Key frame="674" value="40.6" />
                                        <Key frame="692" value="40.6" />
                                        <Key frame="696" value="40.6" />
                                        <Key frame="719" value="40.6" />
                                        <Key frame="723" value="40.6" />
                                        <Key frame="751" value="40.6" />
                                        <Key frame="761" value="40.6" />
                                        <Key frame="770" value="-0.901463" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="ToyotaPepper" id="10" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="882" y="837">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="LoosenStiffness" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="212" y="61">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.names = ['LArm', 'RArm']
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.motion.setStiffnesses(self.names, 1)

    def onInput_onStart(self):
        self.motion.setStiffnesses(self.names, 0)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="SensorDataR" id="3" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="209" y="203">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="OutPut1" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="OutPut2" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="RWristYaw" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="251" y="320">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RWristYaw" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/RWristYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="RElbowRoll" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="242" y="441">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RElbowRoll" id="3" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="223" y="182">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/RElbowRoll/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="301" y="402">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="468" y="244">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RElbowYaw" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="RShoulderRoll" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="231" y="18">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RShoulderRoll" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/RWristYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="RShoulderPitch" id="3" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="239" y="147">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RShoulderPitch" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/RShoulderPitch/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="RElbowYaw" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="364" y="95">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="RElbowYaw" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/RElbowYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="PlaySoundAlternateR" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="406" y="208">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Play SoundR" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="185" y="90">
                                                                    <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                                                    <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="5" />
                                                                    <Parameter name="File name" inherits_from_parent="0" content_type="4" value="Sounds/se_maoudamashii_instruments_piano1_1do.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="6" />
                                                                    <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="7" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="8" />
                                                                    <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="9" />
                                                                    <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="10" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="390" y="173">
                                                                                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.volume = 1.0
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
               #id = self.player.post.playFileInLoop(p,self.volume/3.,self.getParameter("Balance L/R"))
            else :
                #self.logger.info( p )
                if(p != "") :
                    id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.volume,self.getParameter("Balance L/R"))
                    self.ids.append(id)
                    self.player.wait(id, 0)
                else :
                    self.logger.info( p )
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_volume(self, volume):
        self.volume = 1.0

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                                                        <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                                                                        <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                                                                        <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                                                                        <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                                                                    </Box>
                                                                                    <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="228" y="32">
                                                                                        <bitmap>media/images/box/folder.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self,val):
        if (val < 0.0):
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_guitar15.ogg"
        else :
            self.fileName = ""
        #self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.fileName)

    def onInput_onStop(self):
        self.fileName = ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                                                        <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="SensorDataL" id="6" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="213" y="339">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="OutPut1" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="OutPut2" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="trigger" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="LWristYaw" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="251" y="320">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LWristYaw" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LWristYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LElbowRoll" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="242" y="441">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LElbowRoll" id="3" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="223" y="182">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LElbowRoll/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="301" y="402">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="468" y="244">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RElbowYaw" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LShoulderRoll" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="231" y="18">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LShoulderRoll" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LShoulderRoll/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LShoulderPitch" id="3" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="314" y="204">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LShoulderPitch" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LShoulderPitch/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LElbowYaw" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="364" y="95">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LElbowYaw" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LElbowYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LWristYawBang" id="6" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="531" y="410">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="LWristYaw" id="2" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="127" y="25">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                                        <Parameter name="key" inherits_from_parent="0" content_type="3" value="Device/SubDeviceList/LWristYaw/Position/Sensor/Value" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="120" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.8" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Log" id="1" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="348" y="108">
                                                                                        <bitmap>media/images/box/print.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="RShoulderRoll" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                                                                        <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                                                                            <Choice value="Fatal" />
                                                                                            <Choice value="Error" />
                                                                                            <Choice value="Warning" />
                                                                                            <Choice value="Info" />
                                                                                            <Choice value="Debug" />
                                                                                        </Parameter>
                                                                                    </Box>
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="6" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="PlaySoundAlternateL" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="429" y="317">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Play SoundL" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="185" y="90">
                                                                    <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                                                    <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="5" />
                                                                    <Parameter name="File name" inherits_from_parent="0" content_type="4" value="Sounds/se_maoudamashii_instruments_piano1_1do.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="6" />
                                                                    <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="7" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="8" />
                                                                    <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="-1" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="9" />
                                                                    <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="10" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="390" y="173">
                                                                                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.volume = 1.0
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
               self.logger.info( "hogehoge" )
               #id = self.player.post.playFileInLoop(p,self.volume/3.,self.getParameter("Balance L/R"))
            else :
                if(p != "") :
                    id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.volume,self.getParameter("Balance L/R"))
                    self.ids.append(id)
                    self.player.wait(id, 0)
                else :
                    self.logger.info( p )
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_volume(self, volume):
        self.volume = 1.0

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Input name="volume" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                                                        <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                                                                        <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                                                                        <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                                                                        <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                                                                    </Box>
                                                                                    <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="228" y="32">
                                                                                        <bitmap>media/images/box/folder.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self,val):
        if (val < -1.4):
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_1do.ogg"
        elif (val < -1.0) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_2re.ogg"
        elif (val < -0.6) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_3mi.ogg"
        elif (val < -0.2) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_4fa.ogg"
        elif (val < 0.2) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_5so.ogg"
        elif (val < 0.6) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_6ra.ogg"
        elif (val < 1.0) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_7si.ogg"
        elif (val < 1.4) :
            self.fileName = "/../PepperGuitar/Sounds/se_maoudamashii_instruments_piano1_8do.ogg"
        else :
            self.fileName = ""
        #self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.fileName)

    def onInput_onStop(self):
        self.fileName = ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                                                        <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Timeline (1)" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="618" y="770">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="267">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="12.2" />
                                        <Key frame="8" value="-0.139541" />
                                        <Key frame="15" value="-18.9" />
                                        <Key frame="26" value="34.2" />
                                        <Key frame="32" value="11.1" />
                                        <Key frame="43" value="36.5" />
                                        <Key frame="49" value="-0.139541" />
                                        <Key frame="64" value="-24.9" />
                                        <Key frame="72" value="-18.9" />
                                        <Key frame="77" value="-34.4" />
                                        <Key frame="84" value="-0.139541" />
                                        <Key frame="95" value="35" />
                                        <Key frame="99" value="-18.9" />
                                        <Key frame="110" value="34.2" />
                                        <Key frame="117" value="11.1" />
                                        <Key frame="128" value="36.5" />
                                        <Key frame="134" value="-0.139541" />
                                        <Key frame="150" value="33" />
                                        <Key frame="157" value="-18.9" />
                                        <Key frame="162" value="-34.4" />
                                        <Key frame="172" value="-0.139541" />
                                        <Key frame="184" value="12.2" />
                                        <Key frame="191" value="27" />
                                        <Key frame="206" value="34.2" />
                                        <Key frame="212" value="11.1" />
                                        <Key frame="225" value="-0.139541" />
                                        <Key frame="229" value="-0.139541" />
                                        <Key frame="246" value="33" />
                                        <Key frame="255" value="36.5" />
                                        <Key frame="260" value="12.2" />
                                        <Key frame="267" value="35" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="0.56071" />
                                        <Key frame="8" value="0.56071" />
                                        <Key frame="15" value="0.56071" />
                                        <Key frame="26" value="0.56071" />
                                        <Key frame="32" value="0.56071" />
                                        <Key frame="43" value="0.56071" />
                                        <Key frame="49" value="-119.5" />
                                        <Key frame="64" value="0.56071" />
                                        <Key frame="72" value="0.56071" />
                                        <Key frame="77" value="0.56071" />
                                        <Key frame="84" value="0.56071" />
                                        <Key frame="95" value="0.56071" />
                                        <Key frame="99" value="0.56071" />
                                        <Key frame="110" value="0.56071" />
                                        <Key frame="117" value="0.56071" />
                                        <Key frame="128" value="0.56071" />
                                        <Key frame="134" value="-88.3" />
                                        <Key frame="150" value="0.56071" />
                                        <Key frame="157" value="0.56071" />
                                        <Key frame="162" value="0.56071" />
                                        <Key frame="172" value="0.56071" />
                                        <Key frame="184" value="0.56071" />
                                        <Key frame="191" value="0.56071" />
                                        <Key frame="206" value="0.56071" />
                                        <Key frame="212" value="0.56071" />
                                        <Key frame="225" value="88.3" />
                                        <Key frame="229" value="-86.6" />
                                        <Key frame="246" value="0.56071" />
                                        <Key frame="255" value="0.56071" />
                                        <Key frame="260" value="0.56071" />
                                        <Key frame="267" value="0.56071" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-0.419428" />
                                        <Key frame="8" value="-0.419428" />
                                        <Key frame="15" value="-0.419428" />
                                        <Key frame="26" value="-0.419428" />
                                        <Key frame="32" value="-0.419428" />
                                        <Key frame="43" value="-0.419428" />
                                        <Key frame="49" value="-0.419428" />
                                        <Key frame="64" value="-0.419428" />
                                        <Key frame="72" value="-0.419428" />
                                        <Key frame="77" value="-0.419428" />
                                        <Key frame="84" value="-0.419428" />
                                        <Key frame="95" value="-0.419428" />
                                        <Key frame="99" value="-0.419428" />
                                        <Key frame="110" value="-0.419428" />
                                        <Key frame="117" value="-0.419428" />
                                        <Key frame="128" value="-0.419428" />
                                        <Key frame="134" value="-0.419428" />
                                        <Key frame="150" value="-0.419428" />
                                        <Key frame="157" value="-0.419428" />
                                        <Key frame="162" value="-0.419428" />
                                        <Key frame="172" value="-0.419428" />
                                        <Key frame="184" value="-0.419428" />
                                        <Key frame="191" value="-0.419428" />
                                        <Key frame="206" value="-0.419428" />
                                        <Key frame="212" value="-0.419428" />
                                        <Key frame="225" value="-0.419428" />
                                        <Key frame="229" value="-0.419428" />
                                        <Key frame="246" value="-0.419428" />
                                        <Key frame="255" value="-0.419428" />
                                        <Key frame="260" value="-0.419428" />
                                        <Key frame="267" value="-0.419428" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="0" />
                                        <Key frame="8" value="0" />
                                        <Key frame="15" value="0" />
                                        <Key frame="26" value="0" />
                                        <Key frame="32" value="0" />
                                        <Key frame="43" value="0" />
                                        <Key frame="49" value="0" />
                                        <Key frame="64" value="0" />
                                        <Key frame="72" value="0" />
                                        <Key frame="77" value="0" />
                                        <Key frame="84" value="0" />
                                        <Key frame="95" value="0" />
                                        <Key frame="99" value="0" />
                                        <Key frame="110" value="0" />
                                        <Key frame="117" value="0" />
                                        <Key frame="128" value="0" />
                                        <Key frame="134" value="0" />
                                        <Key frame="150" value="0" />
                                        <Key frame="157" value="0" />
                                        <Key frame="162" value="0" />
                                        <Key frame="172" value="0" />
                                        <Key frame="184" value="0" />
                                        <Key frame="191" value="0" />
                                        <Key frame="206" value="0" />
                                        <Key frame="212" value="0" />
                                        <Key frame="225" value="0" />
                                        <Key frame="229" value="0" />
                                        <Key frame="246" value="0" />
                                        <Key frame="255" value="0" />
                                        <Key frame="260" value="0" />
                                        <Key frame="267" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-0.506153" />
                                        <Key frame="8" value="29.5" />
                                        <Key frame="15" value="-25.3" />
                                        <Key frame="26" value="29.5" />
                                        <Key frame="32" value="-0.506153" />
                                        <Key frame="43" value="-0.506153" />
                                        <Key frame="49" value="-29.5" />
                                        <Key frame="64" value="-0.506153" />
                                        <Key frame="72" value="-0.506153" />
                                        <Key frame="77" value="-0.506153" />
                                        <Key frame="84" value="-0.506153" />
                                        <Key frame="95" value="-0.506153" />
                                        <Key frame="99" value="-0.506153" />
                                        <Key frame="110" value="-0.506153" />
                                        <Key frame="117" value="-0.506153" />
                                        <Key frame="128" value="-0.506153" />
                                        <Key frame="134" value="-0.506153" />
                                        <Key frame="150" value="-0.506153" />
                                        <Key frame="157" value="-0.506153" />
                                        <Key frame="162" value="-0.506153" />
                                        <Key frame="172" value="-0.506153" />
                                        <Key frame="184" value="-0.506153" />
                                        <Key frame="191" value="-0.506153" />
                                        <Key frame="206" value="29.5" />
                                        <Key frame="212" value="-0.506153" />
                                        <Key frame="225" value="29.5" />
                                        <Key frame="229" value="-29.5" />
                                        <Key frame="246" value="-0.506153" />
                                        <Key frame="255" value="-0.506153" />
                                        <Key frame="260" value="-0.506153" />
                                        <Key frame="267" value="-0.506153" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-24.5" />
                                        <Key frame="8" value="-45.4" />
                                        <Key frame="15" value="-24.5" />
                                        <Key frame="26" value="-45.4" />
                                        <Key frame="32" value="-24.5" />
                                        <Key frame="43" value="-45.4" />
                                        <Key frame="49" value="-24.5" />
                                        <Key frame="64" value="-45.4" />
                                        <Key frame="72" value="-45.4" />
                                        <Key frame="77" value="-24.5" />
                                        <Key frame="84" value="-45.4" />
                                        <Key frame="95" value="-45.4" />
                                        <Key frame="99" value="-24.5" />
                                        <Key frame="110" value="-45.4" />
                                        <Key frame="117" value="-24.5" />
                                        <Key frame="128" value="-45.4" />
                                        <Key frame="134" value="-24.5" />
                                        <Key frame="150" value="-45.4" />
                                        <Key frame="157" value="-45.4" />
                                        <Key frame="162" value="-24.5" />
                                        <Key frame="172" value="-45.4" />
                                        <Key frame="184" value="-24.5" />
                                        <Key frame="191" value="-45.4" />
                                        <Key frame="206" value="-45.4" />
                                        <Key frame="212" value="-24.5" />
                                        <Key frame="225" value="-45.4" />
                                        <Key frame="229" value="-24.5" />
                                        <Key frame="246" value="-45.4" />
                                        <Key frame="255" value="-45.4" />
                                        <Key frame="260" value="-24.5" />
                                        <Key frame="267" value="-45.4" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-119.5" />
                                        <Key frame="8" value="-119.5" />
                                        <Key frame="15" value="-119.5" />
                                        <Key frame="26" value="-119.5" />
                                        <Key frame="32" value="-119.5" />
                                        <Key frame="43" value="-119.5" />
                                        <Key frame="49" value="-119.5" />
                                        <Key frame="64" value="-119.5" />
                                        <Key frame="72" value="-119.5" />
                                        <Key frame="77" value="-119.5" />
                                        <Key frame="84" value="-119.5" />
                                        <Key frame="95" value="-119.5" />
                                        <Key frame="99" value="-119.5" />
                                        <Key frame="110" value="-119.5" />
                                        <Key frame="117" value="-119.5" />
                                        <Key frame="128" value="-119.5" />
                                        <Key frame="134" value="-119.5" />
                                        <Key frame="150" value="-119.5" />
                                        <Key frame="157" value="-119.5" />
                                        <Key frame="162" value="-119.5" />
                                        <Key frame="172" value="-119.5" />
                                        <Key frame="184" value="-119.5" />
                                        <Key frame="191" value="-119.5" />
                                        <Key frame="206" value="-119.5" />
                                        <Key frame="212" value="-119.5" />
                                        <Key frame="225" value="-119.5" />
                                        <Key frame="229" value="-119.5" />
                                        <Key frame="246" value="-119.5" />
                                        <Key frame="255" value="-119.5" />
                                        <Key frame="260" value="-119.5" />
                                        <Key frame="267" value="-119.5" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                        <Key frame="4" value="0.52" />
                                        <Key frame="8" value="0.66" />
                                        <Key frame="15" value="0.52" />
                                        <Key frame="26" value="0.66" />
                                        <Key frame="32" value="0.52" />
                                        <Key frame="43" value="0.66" />
                                        <Key frame="49" value="0.52" />
                                        <Key frame="64" value="0.66" />
                                        <Key frame="72" value="0.66" />
                                        <Key frame="77" value="0.52" />
                                        <Key frame="84" value="0.66" />
                                        <Key frame="95" value="0.66" />
                                        <Key frame="99" value="0.52" />
                                        <Key frame="110" value="0.66" />
                                        <Key frame="117" value="0.52" />
                                        <Key frame="128" value="0.66" />
                                        <Key frame="134" value="0.52" />
                                        <Key frame="150" value="0.66" />
                                        <Key frame="157" value="0.66" />
                                        <Key frame="162" value="0.52" />
                                        <Key frame="172" value="0.66" />
                                        <Key frame="184" value="0.52" />
                                        <Key frame="191" value="0.66" />
                                        <Key frame="206" value="0.66" />
                                        <Key frame="212" value="0.52" />
                                        <Key frame="225" value="0.66" />
                                        <Key frame="229" value="0.52" />
                                        <Key frame="246" value="0.66" />
                                        <Key frame="255" value="0.66" />
                                        <Key frame="260" value="0.52" />
                                        <Key frame="267" value="0.66" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-17.3" />
                                        <Key frame="8" value="7.6" />
                                        <Key frame="15" value="-17.3" />
                                        <Key frame="26" value="7.6" />
                                        <Key frame="32" value="-17.3" />
                                        <Key frame="43" value="7.6" />
                                        <Key frame="49" value="-17.3" />
                                        <Key frame="64" value="7.6" />
                                        <Key frame="72" value="7.6" />
                                        <Key frame="77" value="-17.3" />
                                        <Key frame="84" value="7.6" />
                                        <Key frame="95" value="7.6" />
                                        <Key frame="99" value="-17.3" />
                                        <Key frame="110" value="7.6" />
                                        <Key frame="117" value="-17.3" />
                                        <Key frame="128" value="7.6" />
                                        <Key frame="134" value="-17.3" />
                                        <Key frame="150" value="7.6" />
                                        <Key frame="157" value="7.6" />
                                        <Key frame="162" value="-17.3" />
                                        <Key frame="172" value="7.6" />
                                        <Key frame="184" value="-17.3" />
                                        <Key frame="191" value="7.6" />
                                        <Key frame="206" value="7.6" />
                                        <Key frame="212" value="-17.3" />
                                        <Key frame="225" value="7.6" />
                                        <Key frame="229" value="-17.3" />
                                        <Key frame="246" value="7.6" />
                                        <Key frame="255" value="7.6" />
                                        <Key frame="260" value="-17.3" />
                                        <Key frame="267" value="7.6" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="37.5" />
                                        <Key frame="8" value="37.5" />
                                        <Key frame="15" value="37.5" />
                                        <Key frame="26" value="37.5" />
                                        <Key frame="32" value="37.5" />
                                        <Key frame="43" value="37.5" />
                                        <Key frame="49" value="37.5" />
                                        <Key frame="64" value="37.5" />
                                        <Key frame="72" value="37.5" />
                                        <Key frame="77" value="37.5" />
                                        <Key frame="84" value="37.5" />
                                        <Key frame="95" value="26.9" />
                                        <Key frame="99" value="37.5" />
                                        <Key frame="110" value="37.5" />
                                        <Key frame="117" value="37.5" />
                                        <Key frame="128" value="37.5" />
                                        <Key frame="134" value="37.5" />
                                        <Key frame="150" value="37.5" />
                                        <Key frame="157" value="37.5" />
                                        <Key frame="162" value="37.5" />
                                        <Key frame="172" value="37.5" />
                                        <Key frame="184" value="37.5" />
                                        <Key frame="191" value="26.9" />
                                        <Key frame="206" value="37.5" />
                                        <Key frame="212" value="37.5" />
                                        <Key frame="225" value="37.5" />
                                        <Key frame="229" value="37.5" />
                                        <Key frame="246" value="37.5" />
                                        <Key frame="255" value="37.5" />
                                        <Key frame="260" value="37.5" />
                                        <Key frame="267" value="26.9" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-17.4" />
                                        <Key frame="8" value="-17.4" />
                                        <Key frame="15" value="-17.4" />
                                        <Key frame="26" value="-17.4" />
                                        <Key frame="32" value="-17.4" />
                                        <Key frame="43" value="-17.4" />
                                        <Key frame="49" value="-17.4" />
                                        <Key frame="64" value="-17.4" />
                                        <Key frame="72" value="-17.4" />
                                        <Key frame="77" value="-17.4" />
                                        <Key frame="84" value="-17.4" />
                                        <Key frame="95" value="-17.4" />
                                        <Key frame="99" value="-17.4" />
                                        <Key frame="110" value="-17.4" />
                                        <Key frame="117" value="-17.4" />
                                        <Key frame="128" value="-17.4" />
                                        <Key frame="134" value="-17.4" />
                                        <Key frame="150" value="-17.4" />
                                        <Key frame="157" value="-17.4" />
                                        <Key frame="162" value="-17.4" />
                                        <Key frame="172" value="-17.4" />
                                        <Key frame="184" value="-17.4" />
                                        <Key frame="191" value="-17.4" />
                                        <Key frame="206" value="-17.4" />
                                        <Key frame="212" value="-17.4" />
                                        <Key frame="225" value="-17.4" />
                                        <Key frame="229" value="-17.4" />
                                        <Key frame="246" value="-17.4" />
                                        <Key frame="255" value="-17.4" />
                                        <Key frame="260" value="-17.4" />
                                        <Key frame="267" value="-17.4" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="85.1" />
                                        <Key frame="8" value="85.1" />
                                        <Key frame="15" value="85.1" />
                                        <Key frame="26" value="85.1" />
                                        <Key frame="32" value="85.1" />
                                        <Key frame="43" value="85.1" />
                                        <Key frame="49" value="85.1" />
                                        <Key frame="64" value="85.1" />
                                        <Key frame="72" value="85.1" />
                                        <Key frame="77" value="85.1" />
                                        <Key frame="84" value="85.1" />
                                        <Key frame="95" value="85.1" />
                                        <Key frame="99" value="85.1" />
                                        <Key frame="110" value="85.1" />
                                        <Key frame="117" value="85.1" />
                                        <Key frame="128" value="85.1" />
                                        <Key frame="134" value="85.1" />
                                        <Key frame="150" value="85.1" />
                                        <Key frame="157" value="85.1" />
                                        <Key frame="162" value="85.1" />
                                        <Key frame="172" value="85.1" />
                                        <Key frame="184" value="85.1" />
                                        <Key frame="191" value="85.1" />
                                        <Key frame="206" value="85.1" />
                                        <Key frame="212" value="85.1" />
                                        <Key frame="225" value="85.1" />
                                        <Key frame="229" value="85.1" />
                                        <Key frame="246" value="85.1" />
                                        <Key frame="255" value="85.1" />
                                        <Key frame="260" value="85.1" />
                                        <Key frame="267" value="85.1" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="17.7" />
                                        <Key frame="8" value="17.7" />
                                        <Key frame="15" value="17.7" />
                                        <Key frame="26" value="17.7" />
                                        <Key frame="32" value="17.7" />
                                        <Key frame="43" value="17.7" />
                                        <Key frame="49" value="17.7" />
                                        <Key frame="64" value="17.7" />
                                        <Key frame="72" value="17.7" />
                                        <Key frame="77" value="17.7" />
                                        <Key frame="84" value="17.7" />
                                        <Key frame="95" value="17.7" />
                                        <Key frame="99" value="17.7" />
                                        <Key frame="110" value="17.7" />
                                        <Key frame="117" value="17.7" />
                                        <Key frame="128" value="17.7" />
                                        <Key frame="134" value="17.7" />
                                        <Key frame="150" value="17.7" />
                                        <Key frame="157" value="17.7" />
                                        <Key frame="162" value="17.7" />
                                        <Key frame="172" value="17.7" />
                                        <Key frame="184" value="17.7" />
                                        <Key frame="191" value="17.7" />
                                        <Key frame="206" value="17.7" />
                                        <Key frame="212" value="17.7" />
                                        <Key frame="225" value="17.7" />
                                        <Key frame="229" value="17.7" />
                                        <Key frame="246" value="17.7" />
                                        <Key frame="255" value="17.7" />
                                        <Key frame="260" value="17.7" />
                                        <Key frame="267" value="17.7" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                        <Key frame="4" value="0.02" />
                                        <Key frame="8" value="0.02" />
                                        <Key frame="15" value="0.02" />
                                        <Key frame="26" value="0.02" />
                                        <Key frame="32" value="0.02" />
                                        <Key frame="43" value="0.02" />
                                        <Key frame="49" value="0.02" />
                                        <Key frame="64" value="0.02" />
                                        <Key frame="72" value="0.02" />
                                        <Key frame="77" value="0.02" />
                                        <Key frame="84" value="0.02" />
                                        <Key frame="95" value="0.12" />
                                        <Key frame="99" value="0.02" />
                                        <Key frame="110" value="0.02" />
                                        <Key frame="117" value="0.02" />
                                        <Key frame="128" value="0.02" />
                                        <Key frame="134" value="0.02" />
                                        <Key frame="150" value="0.02" />
                                        <Key frame="157" value="0.02" />
                                        <Key frame="162" value="0.02" />
                                        <Key frame="172" value="0.02" />
                                        <Key frame="184" value="0.02" />
                                        <Key frame="191" value="0.12" />
                                        <Key frame="206" value="0.02" />
                                        <Key frame="212" value="0.02" />
                                        <Key frame="225" value="0.02" />
                                        <Key frame="229" value="0.02" />
                                        <Key frame="246" value="0.02" />
                                        <Key frame="255" value="0.02" />
                                        <Key frame="260" value="0.02" />
                                        <Key frame="267" value="0.12" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="43" />
                                        <Key frame="8" value="102.3" />
                                        <Key frame="15" value="43" />
                                        <Key frame="26" value="102.3" />
                                        <Key frame="32" value="43" />
                                        <Key frame="43" value="102.3" />
                                        <Key frame="49" value="43" />
                                        <Key frame="64" value="102.3" />
                                        <Key frame="72" value="102.3" />
                                        <Key frame="77" value="43" />
                                        <Key frame="84" value="102.3" />
                                        <Key frame="95" value="102.3" />
                                        <Key frame="99" value="43" />
                                        <Key frame="110" value="102.3" />
                                        <Key frame="117" value="43" />
                                        <Key frame="128" value="102.3" />
                                        <Key frame="134" value="43" />
                                        <Key frame="150" value="102.3" />
                                        <Key frame="157" value="102.3" />
                                        <Key frame="162" value="43" />
                                        <Key frame="172" value="102.3" />
                                        <Key frame="184" value="43" />
                                        <Key frame="191" value="102.3" />
                                        <Key frame="206" value="102.3" />
                                        <Key frame="212" value="43" />
                                        <Key frame="225" value="102.3" />
                                        <Key frame="229" value="43" />
                                        <Key frame="246" value="102.3" />
                                        <Key frame="255" value="102.3" />
                                        <Key frame="260" value="43" />
                                        <Key frame="267" value="102.3" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="-11.3" />
                                        <Key frame="8" value="-40.7" />
                                        <Key frame="15" value="-11.3" />
                                        <Key frame="26" value="-40.7" />
                                        <Key frame="32" value="-11.3" />
                                        <Key frame="43" value="-40.7" />
                                        <Key frame="49" value="-11.3" />
                                        <Key frame="64" value="-40.7" />
                                        <Key frame="72" value="-40.7" />
                                        <Key frame="77" value="-11.3" />
                                        <Key frame="84" value="-40.7" />
                                        <Key frame="95" value="-63.2" />
                                        <Key frame="99" value="-11.3" />
                                        <Key frame="110" value="-40.7" />
                                        <Key frame="117" value="-11.3" />
                                        <Key frame="128" value="-40.7" />
                                        <Key frame="134" value="-11.3" />
                                        <Key frame="150" value="-40.7" />
                                        <Key frame="157" value="-40.7" />
                                        <Key frame="162" value="-11.3" />
                                        <Key frame="172" value="-40.7" />
                                        <Key frame="184" value="-11.3" />
                                        <Key frame="191" value="-63.2" />
                                        <Key frame="206" value="-40.7" />
                                        <Key frame="212" value="-11.3" />
                                        <Key frame="225" value="-40.7" />
                                        <Key frame="229" value="-11.3" />
                                        <Key frame="246" value="-40.7" />
                                        <Key frame="255" value="-40.7" />
                                        <Key frame="260" value="-11.3" />
                                        <Key frame="267" value="-63.2" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                        <Key frame="4" value="40.6" />
                                        <Key frame="8" value="40.6" />
                                        <Key frame="15" value="40.6" />
                                        <Key frame="26" value="40.6" />
                                        <Key frame="32" value="40.6" />
                                        <Key frame="43" value="40.6" />
                                        <Key frame="49" value="40.6" />
                                        <Key frame="64" value="40.6" />
                                        <Key frame="72" value="40.6" />
                                        <Key frame="77" value="40.6" />
                                        <Key frame="84" value="40.6" />
                                        <Key frame="95" value="40.6" />
                                        <Key frame="99" value="40.6" />
                                        <Key frame="110" value="40.6" />
                                        <Key frame="117" value="40.6" />
                                        <Key frame="128" value="40.6" />
                                        <Key frame="134" value="40.6" />
                                        <Key frame="150" value="40.6" />
                                        <Key frame="157" value="40.6" />
                                        <Key frame="162" value="40.6" />
                                        <Key frame="172" value="40.6" />
                                        <Key frame="184" value="40.6" />
                                        <Key frame="191" value="40.6" />
                                        <Key frame="206" value="40.6" />
                                        <Key frame="212" value="40.6" />
                                        <Key frame="225" value="40.6" />
                                        <Key frame="229" value="40.6" />
                                        <Key frame="246" value="40.6" />
                                        <Key frame="255" value="40.6" />
                                        <Key frame="260" value="40.6" />
                                        <Key frame="267" value="40.6" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="loadUrl (2)" id="12" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="82" y="301">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.loadUrl(url)
                tabletService.showWebview()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="index_b.html" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="loadUrl (3)" id="15" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="736" y="890">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.loadUrl(url)
                tabletService.showWebview()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="index_g.html" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="Tactile Head" id="16" localization="8" tooltip="Detect touch on head tactile sensor." x="77" y="46">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Tactile Head (1)" id="18" localization="8" tooltip="Detect touch on head tactile sensor." x="104" y="616">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="loadUrl (4)" id="19" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="228" y="745">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.loadUrl(url)
                tabletService.showWebview()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="index_b.html" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="Say (1)" id="20" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="123" y="991">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " さあてミュージックハッカソンもたけなわ。1曲いかがですか？ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[さあてミュージックハッカソンもたけなわ。1曲いかがですか？]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Speech Reco. (1)" id="22" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="252" y="993">
                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                            <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                            <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="はい;いいえ" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                            <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                            <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                            <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                            <Resource name="Speech recognition" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Switch Case (2)" id="23" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="388" y="991">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("いいえ")):
			self.output_1(p)
		elif(p == self.typeConversion("頼むよ")):
			self.output_2(p)
		elif(p == self.typeConversion("そうだね")):
			self.output_3(p)
		elif(p == self.typeConversion("ありがとう")):
			self.output_4(p)
		elif(p == self.typeConversion("はい")):
			self.output_5(p)
		elif(p == self.typeConversion("やめとく")):
			self.output_6(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;いいえ&quot;</keyword>
                                    <keyword>&quot;頼むよ&quot;</keyword>
                                    <keyword>&quot;そうだね&quot;</keyword>
                                    <keyword>&quot;ありがとう&quot;</keyword>
                                    <keyword>&quot;はい&quot;</keyword>
                                    <keyword>&quot;やめとく&quot;</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="7" />
                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="8" />
                            <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="このIOはボックスにより自動で追加されました。詳細はボックスのツールチップをご覧ください。" id="9" />
                        </Box>
                        <Box name="Say (5)" id="24" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="779" y="1008">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " 音楽再生はやめときますね！ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[Hello]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[音楽再生はやめときますね！]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Get Expression (Multi) (1)" id="25" localization="8" tooltip="This box returns the detected facial expression of every person in front of the robot.&#x0A;The detection fails when there is no person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. &#x0A;Furthermore it is possible to select the required emotions:&#x0A;- neutral&#x0A;- happy&#x0A;- surprised&#x0A;- angry&#x0A;- sad" x="368" y="1229">
                            <bitmap>media/images/box/interaction/emotion.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.threshNeutralEmotion = self.confidence + 0.15
        self.threshHappyEmotion = self.confidence
        self.threshSurprisedEmotion = self.confidence + 0.05
        self.threshAngryEmotion = self.confidence + 0.2
        self.threshSadEmotion = self.confidence + 0.15
        self.emotions = ["neutral", "happy", "surprised", "angry", "sad"]
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.bIsRunning = False
        self.emotionValues = []
        self.cancelDelays()

    def onInput_onStart(self):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)
            self.emotionValues = []
            self.bIsRunning = True
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        if len(ids) == 0:
                            self.errorMes = "No face detected"
                            self.onUnload()
                        else:
                            #analyze age properties
                            index = -1
                            for id in ids:
                                index += 1
                                self.faceC.analyzeFaceCharacteristics(id)
                                time.sleep(0.1)
                                value = ALMemory.getData("PeoplePerception/Person/"+str(id)+"/ExpressionProperties")
                                elem = [x for x in self.emotionValues if x[0] == id]
                                if elem !=[]:
                                    elemIndex = self.emotionValues.index(elem[0])
                                    self.emotionValues[elemIndex][1][0] += value[0]
                                    self.emotionValues[elemIndex][1][1] += value[1]
                                    self.emotionValues[elemIndex][1][2] += value[2]
                                    self.emotionValues[elemIndex][1][3] += value[3]
                                    self.emotionValues[elemIndex][1][4] += value[4]
                                    self.emotionValues[elemIndex][2] += 1
                                else:
                                    self.emotionValues.append([id, value, 1])
                                self.counter += 1
                    except Exception as e:
                        ids = []
                else:
                    #calculate mean value for neutral, happy, surprised, angry or sad
                    results = []
                    recognized = [0,0,0,0,0]
                    for res in self.emotionValues:
                        emotions = res[1]
                        emotions[0] /= res[2]
                        emotions[1] /= res[2]
                        emotions[2] /= res[2]
                        emotions[3] /= res[2]
                        emotions[4] /= res[2]
                        if self.getParameter("neutral") and emotions[0] > self.threshNeutralEmotion:
                            recognized[0] = emotions[0]
                        if self.getParameter("happy") and emotions[1] >self.threshHappyEmotion:
                            recognized[1] = emotions[1]
                        if self.getParameter("surprised") and emotions[2] > self.threshSurprisedEmotion:
                            recognized[2] = emotions[2]
                        if self.getParameter("angry") and emotions[3] > self.threshAngryEmotion:
                            recognized[3] = emotions[3]
                        if self.getParameter("sad") and emotions[4] > self.threshSadEmotion:
                            recognized[4] = emotions[4]

                        try:
                            if recognized != [0,0,0,0,0]:
                                emotion = self.emotions[recognized.index(max(recognized))]
                            else:
                                emotion = None
                        except:
                            emotion = None
                        if emotion != None:
                            results.append([res[0], emotion])
                    try:
                        ALMemory.removeData("PeoplePerception/Person/"+str(ids[0])+"/ExpressionProperties")
                    except:
                        pass
                    if results != []:
                        self.onStopped(results[0][1])
                        self.onUnload()
                        return
                    else:
                        self.counter = 0

            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip='Returns an array containing [userId, emotion] for every user. The userId is the ID of the person as defined by the ALPeoplePerception API and emotion can be: &#x0A;- &quot;neutral&quot;&#x0A;- &quot;happy&quot;&#x0A;- &quot;surprised&quot;&#x0A;- &quot;angry&quot;&#x0A;- &quot;sad&quot;&#x0A;' id="4" />
                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                            <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.364865" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="4" default_value="5" min="1" max="60" tooltip="" id="7" />
                            <Parameter name="neutral" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                            <Parameter name="happy" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="9" />
                            <Parameter name="surprised" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="10" />
                            <Parameter name="angry" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
                            <Parameter name="sad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="2" indexofinput="3" outputowner="2" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="6" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="7" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="8" />
                        <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="9" />
                        <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="16" indexofoutput="7" />
                        <Link inputowner="8" indexofinput="2" outputowner="13" indexofoutput="5" />
                        <Link inputowner="21" indexofinput="2" outputowner="13" indexofoutput="5" />
                        <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="10" indexofinput="2" outputowner="11" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="8" />
                        <Link inputowner="22" indexofinput="2" outputowner="20" indexofoutput="4" />
                        <Link inputowner="23" indexofinput="2" outputowner="22" indexofoutput="5" />
                        <Link inputowner="22" indexofinput="3" outputowner="22" indexofoutput="5" />
                        <Link inputowner="24" indexofinput="2" outputowner="23" indexofoutput="4" />
                        <Link inputowner="24" indexofinput="2" outputowner="23" indexofoutput="9" />
                        <Link inputowner="20" indexofinput="2" outputowner="18" indexofoutput="7" />
                        <Link inputowner="25" indexofinput="2" outputowner="23" indexofoutput="5" />
                        <Link inputowner="25" indexofinput="2" outputowner="23" indexofoutput="6" />
                        <Link inputowner="25" indexofinput="2" outputowner="23" indexofoutput="7" />
                        <Link inputowner="25" indexofinput="2" outputowner="23" indexofoutput="8" />
                        <Link inputowner="8" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="25" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="25" indexofoutput="5" />
                        <Link inputowner="21" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="18" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="18" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="25" indexofoutput="5" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
